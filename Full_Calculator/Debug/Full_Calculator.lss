
Full_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002e16  00002eaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800068  00800068  00002eb2  2**0
                  ALLOC
  3 .stab         00001d40  00000000  00000000  00002eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b56  00000000  00000000  00004bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000574a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000058aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00009b04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00009f46  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a7d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a0 37       	cpi	r26, 0x70	; 112
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e1       	ldi	r30, 0x16	; 22
      78:	fe e2       	ldi	r31, 0x2E	; 46
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 41 13 	call	0x2682	; 0x2682 <main>
      8a:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a1 16 	jmp	0x2d42	; 0x2d42 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a9 16 	jmp	0x2d52	; 0x2d52 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c5 16 	jmp	0x2d8a	; 0x2d8a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b1 16 	jmp	0x2d62	; 0x2d62 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 cd 16 	jmp	0x2d9a	; 0x2d9a <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <KEYPAD_getPressedKey>:
static uint8 KEYPAD_4x3_adjustKeyNumber(uint8 a_pressedKey);

#endif

uint8 KEYPAD_getPressedKey(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <KEYPAD_getPressedKey+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	uint8 col;
	uint8 row;
	while(1)
	{
		for(col=0;col<N_COL;col++)
     ca8:	1a 82       	std	Y+2, r1	; 0x02
     caa:	4c c0       	rjmp	.+152    	; 0xd44 <KEYPAD_getPressedKey+0xa6>
		{
			KEYPAD_PORT_DIR = (0b00010000 << col);
     cac:	ea e3       	ldi	r30, 0x3A	; 58
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	80 e1       	ldi	r24, 0x10	; 16
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	02 c0       	rjmp	.+4      	; 0xcc0 <KEYPAD_getPressedKey+0x22>
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	2a 95       	dec	r18
     cc2:	e2 f7       	brpl	.-8      	; 0xcbc <KEYPAD_getPressedKey+0x1e>
     cc4:	80 83       	st	Z, r24
			KEYPAD_PORT_OUT = (~(0b00010000 << col));
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	80 e1       	ldi	r24, 0x10	; 16
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 2e       	mov	r0, r18
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <KEYPAD_getPressedKey+0x3e>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <KEYPAD_getPressedKey+0x3a>
     ce0:	80 95       	com	r24
     ce2:	80 83       	st	Z, r24

			for(row=0;row<N_ROW;row++)
     ce4:	19 82       	std	Y+1, r1	; 0x01
     ce6:	28 c0       	rjmp	.+80     	; 0xd38 <KEYPAD_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row))
     ce8:	e9 e3       	ldi	r30, 0x39	; 57
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	28 2f       	mov	r18, r24
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	89 81       	ldd	r24, Y+1	; 0x01
     cf4:	88 2f       	mov	r24, r24
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	a9 01       	movw	r20, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <KEYPAD_getPressedKey+0x62>
     cfc:	55 95       	asr	r21
     cfe:	47 95       	ror	r20
     d00:	8a 95       	dec	r24
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <KEYPAD_getPressedKey+0x5e>
     d04:	ca 01       	movw	r24, r20
     d06:	81 70       	andi	r24, 0x01	; 1
     d08:	90 70       	andi	r25, 0x00	; 0
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	91 f4       	brne	.+36     	; 0xd32 <KEYPAD_getPressedKey+0x94>
				{
					#if (N_COL == 4)
					return KEYPAD_4x4_adjustKeyNumber((row*N_COL)+col+1);
     d0e:	89 81       	ldd	r24, Y+1	; 0x01
     d10:	88 2f       	mov	r24, r24
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	98 2f       	mov	r25, r24
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	89 0f       	add	r24, r25
     d22:	8f 5f       	subi	r24, 0xFF	; 255
     d24:	0e 94 a7 06 	call	0xd4e	; 0xd4e <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	cf 91       	pop	r28
     d2e:	df 91       	pop	r29
     d30:	08 95       	ret
		for(col=0;col<N_COL;col++)
		{
			KEYPAD_PORT_DIR = (0b00010000 << col);
			KEYPAD_PORT_OUT = (~(0b00010000 << col));

			for(row=0;row<N_ROW;row++)
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	8f 5f       	subi	r24, 0xFF	; 255
     d36:	89 83       	std	Y+1, r24	; 0x01
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	a8 f2       	brcs	.-86     	; 0xce8 <KEYPAD_getPressedKey+0x4a>
{
	uint8 col;
	uint8 row;
	while(1)
	{
		for(col=0;col<N_COL;col++)
     d3e:	8a 81       	ldd	r24, Y+2	; 0x02
     d40:	8f 5f       	subi	r24, 0xFF	; 255
     d42:	8a 83       	std	Y+2, r24	; 0x02
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	84 30       	cpi	r24, 0x04	; 4
     d48:	08 f4       	brcc	.+2      	; 0xd4c <KEYPAD_getPressedKey+0xae>
     d4a:	b0 cf       	rjmp	.-160    	; 0xcac <KEYPAD_getPressedKey+0xe>
     d4c:	ad cf       	rjmp	.-166    	; 0xca8 <KEYPAD_getPressedKey+0xa>

00000d4e <KEYPAD_4x4_adjustKeyNumber>:
	}
}

#if (N_COL == 4)
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 a_pressedKey)
{
     d4e:	df 93       	push	r29
     d50:	cf 93       	push	r28
     d52:	00 d0       	rcall	.+0      	; 0xd54 <KEYPAD_4x4_adjustKeyNumber+0x6>
     d54:	00 d0       	rcall	.+0      	; 0xd56 <KEYPAD_4x4_adjustKeyNumber+0x8>
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	89 83       	std	Y+1, r24	; 0x01
	switch(a_pressedKey)
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	3c 83       	std	Y+4, r19	; 0x04
     d64:	2b 83       	std	Y+3, r18	; 0x03
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	9c 81       	ldd	r25, Y+4	; 0x04
     d6a:	88 30       	cpi	r24, 0x08	; 8
     d6c:	91 05       	cpc	r25, r1
     d6e:	09 f4       	brne	.+2      	; 0xd72 <KEYPAD_4x4_adjustKeyNumber+0x24>
     d70:	70 c0       	rjmp	.+224    	; 0xe52 <KEYPAD_4x4_adjustKeyNumber+0x104>
     d72:	2b 81       	ldd	r18, Y+3	; 0x03
     d74:	3c 81       	ldd	r19, Y+4	; 0x04
     d76:	29 30       	cpi	r18, 0x09	; 9
     d78:	31 05       	cpc	r19, r1
     d7a:	5c f5       	brge	.+86     	; 0xdd2 <KEYPAD_4x4_adjustKeyNumber+0x84>
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	9c 81       	ldd	r25, Y+4	; 0x04
     d80:	84 30       	cpi	r24, 0x04	; 4
     d82:	91 05       	cpc	r25, r1
     d84:	09 f4       	brne	.+2      	; 0xd88 <KEYPAD_4x4_adjustKeyNumber+0x3a>
     d86:	59 c0       	rjmp	.+178    	; 0xe3a <KEYPAD_4x4_adjustKeyNumber+0xec>
     d88:	2b 81       	ldd	r18, Y+3	; 0x03
     d8a:	3c 81       	ldd	r19, Y+4	; 0x04
     d8c:	25 30       	cpi	r18, 0x05	; 5
     d8e:	31 05       	cpc	r19, r1
     d90:	9c f4       	brge	.+38     	; 0xdb8 <KEYPAD_4x4_adjustKeyNumber+0x6a>
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	9c 81       	ldd	r25, Y+4	; 0x04
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	91 05       	cpc	r25, r1
     d9a:	09 f4       	brne	.+2      	; 0xd9e <KEYPAD_4x4_adjustKeyNumber+0x50>
     d9c:	48 c0       	rjmp	.+144    	; 0xe2e <KEYPAD_4x4_adjustKeyNumber+0xe0>
     d9e:	2b 81       	ldd	r18, Y+3	; 0x03
     da0:	3c 81       	ldd	r19, Y+4	; 0x04
     da2:	23 30       	cpi	r18, 0x03	; 3
     da4:	31 05       	cpc	r19, r1
     da6:	0c f0       	brlt	.+2      	; 0xdaa <KEYPAD_4x4_adjustKeyNumber+0x5c>
     da8:	45 c0       	rjmp	.+138    	; 0xe34 <KEYPAD_4x4_adjustKeyNumber+0xe6>
     daa:	8b 81       	ldd	r24, Y+3	; 0x03
     dac:	9c 81       	ldd	r25, Y+4	; 0x04
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	91 05       	cpc	r25, r1
     db2:	09 f4       	brne	.+2      	; 0xdb6 <KEYPAD_4x4_adjustKeyNumber+0x68>
     db4:	39 c0       	rjmp	.+114    	; 0xe28 <KEYPAD_4x4_adjustKeyNumber+0xda>
     db6:	67 c0       	rjmp	.+206    	; 0xe86 <KEYPAD_4x4_adjustKeyNumber+0x138>
     db8:	2b 81       	ldd	r18, Y+3	; 0x03
     dba:	3c 81       	ldd	r19, Y+4	; 0x04
     dbc:	26 30       	cpi	r18, 0x06	; 6
     dbe:	31 05       	cpc	r19, r1
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <KEYPAD_4x4_adjustKeyNumber+0x76>
     dc2:	41 c0       	rjmp	.+130    	; 0xe46 <KEYPAD_4x4_adjustKeyNumber+0xf8>
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	87 30       	cpi	r24, 0x07	; 7
     dca:	91 05       	cpc	r25, r1
     dcc:	0c f0       	brlt	.+2      	; 0xdd0 <KEYPAD_4x4_adjustKeyNumber+0x82>
     dce:	3e c0       	rjmp	.+124    	; 0xe4c <KEYPAD_4x4_adjustKeyNumber+0xfe>
     dd0:	37 c0       	rjmp	.+110    	; 0xe40 <KEYPAD_4x4_adjustKeyNumber+0xf2>
     dd2:	2b 81       	ldd	r18, Y+3	; 0x03
     dd4:	3c 81       	ldd	r19, Y+4	; 0x04
     dd6:	2c 30       	cpi	r18, 0x0C	; 12
     dd8:	31 05       	cpc	r19, r1
     dda:	09 f4       	brne	.+2      	; 0xdde <KEYPAD_4x4_adjustKeyNumber+0x90>
     ddc:	46 c0       	rjmp	.+140    	; 0xe6a <KEYPAD_4x4_adjustKeyNumber+0x11c>
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	9c 81       	ldd	r25, Y+4	; 0x04
     de2:	8d 30       	cpi	r24, 0x0D	; 13
     de4:	91 05       	cpc	r25, r1
     de6:	5c f4       	brge	.+22     	; 0xdfe <KEYPAD_4x4_adjustKeyNumber+0xb0>
     de8:	2b 81       	ldd	r18, Y+3	; 0x03
     dea:	3c 81       	ldd	r19, Y+4	; 0x04
     dec:	2a 30       	cpi	r18, 0x0A	; 10
     dee:	31 05       	cpc	r19, r1
     df0:	b1 f1       	breq	.+108    	; 0xe5e <KEYPAD_4x4_adjustKeyNumber+0x110>
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	9c 81       	ldd	r25, Y+4	; 0x04
     df6:	8b 30       	cpi	r24, 0x0B	; 11
     df8:	91 05       	cpc	r25, r1
     dfa:	a4 f5       	brge	.+104    	; 0xe64 <KEYPAD_4x4_adjustKeyNumber+0x116>
     dfc:	2d c0       	rjmp	.+90     	; 0xe58 <KEYPAD_4x4_adjustKeyNumber+0x10a>
     dfe:	2b 81       	ldd	r18, Y+3	; 0x03
     e00:	3c 81       	ldd	r19, Y+4	; 0x04
     e02:	2e 30       	cpi	r18, 0x0E	; 14
     e04:	31 05       	cpc	r19, r1
     e06:	b9 f1       	breq	.+110    	; 0xe76 <KEYPAD_4x4_adjustKeyNumber+0x128>
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	9c 81       	ldd	r25, Y+4	; 0x04
     e0c:	8e 30       	cpi	r24, 0x0E	; 14
     e0e:	91 05       	cpc	r25, r1
     e10:	7c f1       	brlt	.+94     	; 0xe70 <KEYPAD_4x4_adjustKeyNumber+0x122>
     e12:	2b 81       	ldd	r18, Y+3	; 0x03
     e14:	3c 81       	ldd	r19, Y+4	; 0x04
     e16:	2f 30       	cpi	r18, 0x0F	; 15
     e18:	31 05       	cpc	r19, r1
     e1a:	79 f1       	breq	.+94     	; 0xe7a <KEYPAD_4x4_adjustKeyNumber+0x12c>
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	9c 81       	ldd	r25, Y+4	; 0x04
     e20:	80 31       	cpi	r24, 0x10	; 16
     e22:	91 05       	cpc	r25, r1
     e24:	69 f1       	breq	.+90     	; 0xe80 <KEYPAD_4x4_adjustKeyNumber+0x132>
     e26:	2f c0       	rjmp	.+94     	; 0xe86 <KEYPAD_4x4_adjustKeyNumber+0x138>
	{
	case 1 : return 7;
     e28:	97 e0       	ldi	r25, 0x07	; 7
     e2a:	9a 83       	std	Y+2, r25	; 0x02
     e2c:	2e c0       	rjmp	.+92     	; 0xe8a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	break;
	case 2 : return 8;
     e2e:	28 e0       	ldi	r18, 0x08	; 8
     e30:	2a 83       	std	Y+2, r18	; 0x02
     e32:	2b c0       	rjmp	.+86     	; 0xe8a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	break;
	case 3 : return 9;
     e34:	39 e0       	ldi	r19, 0x09	; 9
     e36:	3a 83       	std	Y+2, r19	; 0x02
     e38:	28 c0       	rjmp	.+80     	; 0xe8a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	break;
	case 4 : return '/';
     e3a:	8f e2       	ldi	r24, 0x2F	; 47
     e3c:	8a 83       	std	Y+2, r24	; 0x02
     e3e:	25 c0       	rjmp	.+74     	; 0xe8a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	break;
	case 5 : return 4;
     e40:	94 e0       	ldi	r25, 0x04	; 4
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	22 c0       	rjmp	.+68     	; 0xe8a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	break;
	case 6 : return 5;
     e46:	25 e0       	ldi	r18, 0x05	; 5
     e48:	2a 83       	std	Y+2, r18	; 0x02
     e4a:	1f c0       	rjmp	.+62     	; 0xe8a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	break;
	case 7 : return 6;
     e4c:	36 e0       	ldi	r19, 0x06	; 6
     e4e:	3a 83       	std	Y+2, r19	; 0x02
     e50:	1c c0       	rjmp	.+56     	; 0xe8a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	break;
	case 8 : return '*';
     e52:	8a e2       	ldi	r24, 0x2A	; 42
     e54:	8a 83       	std	Y+2, r24	; 0x02
     e56:	19 c0       	rjmp	.+50     	; 0xe8a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	break;
	case 9 : return 1;
     e58:	91 e0       	ldi	r25, 0x01	; 1
     e5a:	9a 83       	std	Y+2, r25	; 0x02
     e5c:	16 c0       	rjmp	.+44     	; 0xe8a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	break;
	case 10 : return 2;
     e5e:	22 e0       	ldi	r18, 0x02	; 2
     e60:	2a 83       	std	Y+2, r18	; 0x02
     e62:	13 c0       	rjmp	.+38     	; 0xe8a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	break;
	case 11 : return 3;
     e64:	33 e0       	ldi	r19, 0x03	; 3
     e66:	3a 83       	std	Y+2, r19	; 0x02
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	break;
	case 12 : return '-';
     e6a:	8d e2       	ldi	r24, 0x2D	; 45
     e6c:	8a 83       	std	Y+2, r24	; 0x02
     e6e:	0d c0       	rjmp	.+26     	; 0xe8a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	break;
	case 13 : return 13;
     e70:	9d e0       	ldi	r25, 0x0D	; 13
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	0a c0       	rjmp	.+20     	; 0xe8a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	break;
	case 14 : return 0;
     e76:	1a 82       	std	Y+2, r1	; 0x02
     e78:	08 c0       	rjmp	.+16     	; 0xe8a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	break;
	case 15 : return '=';
     e7a:	2d e3       	ldi	r18, 0x3D	; 61
     e7c:	2a 83       	std	Y+2, r18	; 0x02
     e7e:	05 c0       	rjmp	.+10     	; 0xe8a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	break;
	case 16 : return '+';
     e80:	3b e2       	ldi	r19, 0x2B	; 43
     e82:	3a 83       	std	Y+2, r19	; 0x02
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <KEYPAD_4x4_adjustKeyNumber+0x13c>
	break;
	default : return a_pressedKey;
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	8a 83       	std	Y+2, r24	; 0x02
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	0f 90       	pop	r0
     e94:	cf 91       	pop	r28
     e96:	df 91       	pop	r29
     e98:	08 95       	ret

00000e9a <LCD_init>:
 */

#include "lcd.h"

void LCD_init(void)
{
     e9a:	df 93       	push	r29
     e9c:	cf 93       	push	r28
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW);
     ea2:	a7 e3       	ldi	r26, 0x37	; 55
     ea4:	b0 e0       	ldi	r27, 0x00	; 0
     ea6:	e7 e3       	ldi	r30, 0x37	; 55
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	8e 60       	ori	r24, 0x0E	; 14
     eae:	8c 93       	st	X, r24
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0;
		#else
			LCD_DATA_PORT_DIR |= 0x0F;
     eb0:	a1 e3       	ldi	r26, 0x31	; 49
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	e1 e3       	ldi	r30, 0x31	; 49
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	8f 60       	ori	r24, 0x0F	; 15
     ebc:	8c 93       	st	X, r24
		#endif
	LCD_sendCommand(FOUR_BITS_DATA_MODE);
     ebe:	82 e0       	ldi	r24, 0x02	; 2
     ec0:	0e 94 6e 07 	call	0xedc	; 0xedc <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
     ec4:	88 e2       	ldi	r24, 0x28	; 40
     ec6:	0e 94 6e 07 	call	0xedc	; 0xedc <LCD_sendCommand>
	#elif(DATA_BITS_MODE == 8)
	LCD_DATA_PORT_DIR  = 0xFF;
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
	#endif

	LCD_sendCommand(CURSOR_OFF);
     eca:	8c e0       	ldi	r24, 0x0C	; 12
     ecc:	0e 94 6e 07 	call	0xedc	; 0xedc <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND);
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	0e 94 6e 07 	call	0xedc	; 0xedc <LCD_sendCommand>
}
     ed6:	cf 91       	pop	r28
     ed8:	df 91       	pop	r29
     eda:	08 95       	ret

00000edc <LCD_sendCommand>:

void LCD_sendCommand(uint8 a_command)
{
     edc:	0f 93       	push	r16
     ede:	1f 93       	push	r17
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62
     ee8:	c1 58       	subi	r28, 0x81	; 129
     eea:	d0 40       	sbci	r29, 0x00	; 0
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	fe 01       	movw	r30, r28
     ef8:	ef 57       	subi	r30, 0x7F	; 127
     efa:	ff 4f       	sbci	r31, 0xFF	; 255
     efc:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS);
     efe:	a8 e3       	ldi	r26, 0x38	; 56
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e8 e3       	ldi	r30, 0x38	; 56
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8d 7f       	andi	r24, 0xFD	; 253
     f0a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
     f0c:	a8 e3       	ldi	r26, 0x38	; 56
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e8 e3       	ldi	r30, 0x38	; 56
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8b 7f       	andi	r24, 0xFB	; 251
     f18:	8c 93       	st	X, r24
     f1a:	fe 01       	movw	r30, r28
     f1c:	e3 58       	subi	r30, 0x83	; 131
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	a0 e8       	ldi	r26, 0x80	; 128
     f26:	bf e3       	ldi	r27, 0x3F	; 63
     f28:	80 83       	st	Z, r24
     f2a:	91 83       	std	Z+1, r25	; 0x01
     f2c:	a2 83       	std	Z+2, r26	; 0x02
     f2e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f30:	8e 01       	movw	r16, r28
     f32:	07 58       	subi	r16, 0x87	; 135
     f34:	1f 4f       	sbci	r17, 0xFF	; 255
     f36:	fe 01       	movw	r30, r28
     f38:	e3 58       	subi	r30, 0x83	; 131
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	60 81       	ld	r22, Z
     f3e:	71 81       	ldd	r23, Z+1	; 0x01
     f40:	82 81       	ldd	r24, Z+2	; 0x02
     f42:	93 81       	ldd	r25, Z+3	; 0x03
     f44:	2b ea       	ldi	r18, 0xAB	; 171
     f46:	3a ea       	ldi	r19, 0xAA	; 170
     f48:	4a ea       	ldi	r20, 0xAA	; 170
     f4a:	5e e3       	ldi	r21, 0x3E	; 62
     f4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	f8 01       	movw	r30, r16
     f56:	80 83       	st	Z, r24
     f58:	91 83       	std	Z+1, r25	; 0x01
     f5a:	a2 83       	std	Z+2, r26	; 0x02
     f5c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f5e:	fe 01       	movw	r30, r28
     f60:	e7 58       	subi	r30, 0x87	; 135
     f62:	ff 4f       	sbci	r31, 0xFF	; 255
     f64:	60 81       	ld	r22, Z
     f66:	71 81       	ldd	r23, Z+1	; 0x01
     f68:	82 81       	ldd	r24, Z+2	; 0x02
     f6a:	93 81       	ldd	r25, Z+3	; 0x03
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	40 e8       	ldi	r20, 0x80	; 128
     f72:	5f e3       	ldi	r21, 0x3F	; 63
     f74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f78:	88 23       	and	r24, r24
     f7a:	34 f4       	brge	.+12     	; 0xf88 <LCD_sendCommand+0xac>
		__ticks = 1;
     f7c:	fe 01       	movw	r30, r28
     f7e:	e8 58       	subi	r30, 0x88	; 136
     f80:	ff 4f       	sbci	r31, 0xFF	; 255
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	80 83       	st	Z, r24
     f86:	e0 c0       	rjmp	.+448    	; 0x1148 <LCD_sendCommand+0x26c>
	else if (__tmp > 255)
     f88:	fe 01       	movw	r30, r28
     f8a:	e7 58       	subi	r30, 0x87	; 135
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	60 81       	ld	r22, Z
     f90:	71 81       	ldd	r23, Z+1	; 0x01
     f92:	82 81       	ldd	r24, Z+2	; 0x02
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	4f e7       	ldi	r20, 0x7F	; 127
     f9c:	53 e4       	ldi	r21, 0x43	; 67
     f9e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fa2:	18 16       	cp	r1, r24
     fa4:	0c f0       	brlt	.+2      	; 0xfa8 <LCD_sendCommand+0xcc>
     fa6:	c0 c0       	rjmp	.+384    	; 0x1128 <LCD_sendCommand+0x24c>
	{
		_delay_ms(__us / 1000.0);
     fa8:	fe 01       	movw	r30, r28
     faa:	e3 58       	subi	r30, 0x83	; 131
     fac:	ff 4f       	sbci	r31, 0xFF	; 255
     fae:	60 81       	ld	r22, Z
     fb0:	71 81       	ldd	r23, Z+1	; 0x01
     fb2:	82 81       	ldd	r24, Z+2	; 0x02
     fb4:	93 81       	ldd	r25, Z+3	; 0x03
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	4a e7       	ldi	r20, 0x7A	; 122
     fbc:	54 e4       	ldi	r21, 0x44	; 68
     fbe:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	fe 01       	movw	r30, r28
     fc8:	ec 58       	subi	r30, 0x8C	; 140
     fca:	ff 4f       	sbci	r31, 0xFF	; 255
     fcc:	80 83       	st	Z, r24
     fce:	91 83       	std	Z+1, r25	; 0x01
     fd0:	a2 83       	std	Z+2, r26	; 0x02
     fd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd4:	8e 01       	movw	r16, r28
     fd6:	00 59       	subi	r16, 0x90	; 144
     fd8:	1f 4f       	sbci	r17, 0xFF	; 255
     fda:	fe 01       	movw	r30, r28
     fdc:	ec 58       	subi	r30, 0x8C	; 140
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	60 81       	ld	r22, Z
     fe2:	71 81       	ldd	r23, Z+1	; 0x01
     fe4:	82 81       	ldd	r24, Z+2	; 0x02
     fe6:	93 81       	ldd	r25, Z+3	; 0x03
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	4a e7       	ldi	r20, 0x7A	; 122
     fee:	53 e4       	ldi	r21, 0x43	; 67
     ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	f8 01       	movw	r30, r16
     ffa:	80 83       	st	Z, r24
     ffc:	91 83       	std	Z+1, r25	; 0x01
     ffe:	a2 83       	std	Z+2, r26	; 0x02
    1000:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1002:	fe 01       	movw	r30, r28
    1004:	e0 59       	subi	r30, 0x90	; 144
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	60 81       	ld	r22, Z
    100a:	71 81       	ldd	r23, Z+1	; 0x01
    100c:	82 81       	ldd	r24, Z+2	; 0x02
    100e:	93 81       	ldd	r25, Z+3	; 0x03
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e8       	ldi	r20, 0x80	; 128
    1016:	5f e3       	ldi	r21, 0x3F	; 63
    1018:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    101c:	88 23       	and	r24, r24
    101e:	44 f4       	brge	.+16     	; 0x1030 <LCD_sendCommand+0x154>
		__ticks = 1;
    1020:	fe 01       	movw	r30, r28
    1022:	e2 59       	subi	r30, 0x92	; 146
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	91 83       	std	Z+1, r25	; 0x01
    102c:	80 83       	st	Z, r24
    102e:	64 c0       	rjmp	.+200    	; 0x10f8 <LCD_sendCommand+0x21c>
	else if (__tmp > 65535)
    1030:	fe 01       	movw	r30, r28
    1032:	e0 59       	subi	r30, 0x90	; 144
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	60 81       	ld	r22, Z
    1038:	71 81       	ldd	r23, Z+1	; 0x01
    103a:	82 81       	ldd	r24, Z+2	; 0x02
    103c:	93 81       	ldd	r25, Z+3	; 0x03
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	3f ef       	ldi	r19, 0xFF	; 255
    1042:	4f e7       	ldi	r20, 0x7F	; 127
    1044:	57 e4       	ldi	r21, 0x47	; 71
    1046:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    104a:	18 16       	cp	r1, r24
    104c:	0c f0       	brlt	.+2      	; 0x1050 <LCD_sendCommand+0x174>
    104e:	43 c0       	rjmp	.+134    	; 0x10d6 <LCD_sendCommand+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1050:	fe 01       	movw	r30, r28
    1052:	ec 58       	subi	r30, 0x8C	; 140
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	60 81       	ld	r22, Z
    1058:	71 81       	ldd	r23, Z+1	; 0x01
    105a:	82 81       	ldd	r24, Z+2	; 0x02
    105c:	93 81       	ldd	r25, Z+3	; 0x03
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	40 e2       	ldi	r20, 0x20	; 32
    1064:	51 e4       	ldi	r21, 0x41	; 65
    1066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	8e 01       	movw	r16, r28
    1070:	02 59       	subi	r16, 0x92	; 146
    1072:	1f 4f       	sbci	r17, 0xFF	; 255
    1074:	bc 01       	movw	r22, r24
    1076:	cd 01       	movw	r24, r26
    1078:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	f8 01       	movw	r30, r16
    1082:	91 83       	std	Z+1, r25	; 0x01
    1084:	80 83       	st	Z, r24
    1086:	1f c0       	rjmp	.+62     	; 0x10c6 <LCD_sendCommand+0x1ea>
    1088:	fe 01       	movw	r30, r28
    108a:	e4 59       	subi	r30, 0x94	; 148
    108c:	ff 4f       	sbci	r31, 0xFF	; 255
    108e:	89 e1       	ldi	r24, 0x19	; 25
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	91 83       	std	Z+1, r25	; 0x01
    1094:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1096:	fe 01       	movw	r30, r28
    1098:	e4 59       	subi	r30, 0x94	; 148
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	01 97       	sbiw	r24, 0x01	; 1
    10a2:	f1 f7       	brne	.-4      	; 0x10a0 <LCD_sendCommand+0x1c4>
    10a4:	fe 01       	movw	r30, r28
    10a6:	e4 59       	subi	r30, 0x94	; 148
    10a8:	ff 4f       	sbci	r31, 0xFF	; 255
    10aa:	91 83       	std	Z+1, r25	; 0x01
    10ac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ae:	de 01       	movw	r26, r28
    10b0:	a2 59       	subi	r26, 0x92	; 146
    10b2:	bf 4f       	sbci	r27, 0xFF	; 255
    10b4:	fe 01       	movw	r30, r28
    10b6:	e2 59       	subi	r30, 0x92	; 146
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	80 81       	ld	r24, Z
    10bc:	91 81       	ldd	r25, Z+1	; 0x01
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	11 96       	adiw	r26, 0x01	; 1
    10c2:	9c 93       	st	X, r25
    10c4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c6:	fe 01       	movw	r30, r28
    10c8:	e2 59       	subi	r30, 0x92	; 146
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	80 81       	ld	r24, Z
    10ce:	91 81       	ldd	r25, Z+1	; 0x01
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	d1 f6       	brne	.-76     	; 0x1088 <LCD_sendCommand+0x1ac>
    10d4:	4b c0       	rjmp	.+150    	; 0x116c <LCD_sendCommand+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d6:	8e 01       	movw	r16, r28
    10d8:	02 59       	subi	r16, 0x92	; 146
    10da:	1f 4f       	sbci	r17, 0xFF	; 255
    10dc:	fe 01       	movw	r30, r28
    10de:	e0 59       	subi	r30, 0x90	; 144
    10e0:	ff 4f       	sbci	r31, 0xFF	; 255
    10e2:	60 81       	ld	r22, Z
    10e4:	71 81       	ldd	r23, Z+1	; 0x01
    10e6:	82 81       	ldd	r24, Z+2	; 0x02
    10e8:	93 81       	ldd	r25, Z+3	; 0x03
    10ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10ee:	dc 01       	movw	r26, r24
    10f0:	cb 01       	movw	r24, r22
    10f2:	f8 01       	movw	r30, r16
    10f4:	91 83       	std	Z+1, r25	; 0x01
    10f6:	80 83       	st	Z, r24
    10f8:	de 01       	movw	r26, r28
    10fa:	a6 59       	subi	r26, 0x96	; 150
    10fc:	bf 4f       	sbci	r27, 0xFF	; 255
    10fe:	fe 01       	movw	r30, r28
    1100:	e2 59       	subi	r30, 0x92	; 146
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	80 81       	ld	r24, Z
    1106:	91 81       	ldd	r25, Z+1	; 0x01
    1108:	11 96       	adiw	r26, 0x01	; 1
    110a:	9c 93       	st	X, r25
    110c:	8e 93       	st	-X, r24
    110e:	fe 01       	movw	r30, r28
    1110:	e6 59       	subi	r30, 0x96	; 150
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	80 81       	ld	r24, Z
    1116:	91 81       	ldd	r25, Z+1	; 0x01
    1118:	01 97       	sbiw	r24, 0x01	; 1
    111a:	f1 f7       	brne	.-4      	; 0x1118 <LCD_sendCommand+0x23c>
    111c:	fe 01       	movw	r30, r28
    111e:	e6 59       	subi	r30, 0x96	; 150
    1120:	ff 4f       	sbci	r31, 0xFF	; 255
    1122:	91 83       	std	Z+1, r25	; 0x01
    1124:	80 83       	st	Z, r24
    1126:	22 c0       	rjmp	.+68     	; 0x116c <LCD_sendCommand+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1128:	8e 01       	movw	r16, r28
    112a:	08 58       	subi	r16, 0x88	; 136
    112c:	1f 4f       	sbci	r17, 0xFF	; 255
    112e:	fe 01       	movw	r30, r28
    1130:	e7 58       	subi	r30, 0x87	; 135
    1132:	ff 4f       	sbci	r31, 0xFF	; 255
    1134:	60 81       	ld	r22, Z
    1136:	71 81       	ldd	r23, Z+1	; 0x01
    1138:	82 81       	ldd	r24, Z+2	; 0x02
    113a:	93 81       	ldd	r25, Z+3	; 0x03
    113c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1140:	dc 01       	movw	r26, r24
    1142:	cb 01       	movw	r24, r22
    1144:	f8 01       	movw	r30, r16
    1146:	80 83       	st	Z, r24
    1148:	de 01       	movw	r26, r28
    114a:	a7 59       	subi	r26, 0x97	; 151
    114c:	bf 4f       	sbci	r27, 0xFF	; 255
    114e:	fe 01       	movw	r30, r28
    1150:	e8 58       	subi	r30, 0x88	; 136
    1152:	ff 4f       	sbci	r31, 0xFF	; 255
    1154:	80 81       	ld	r24, Z
    1156:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1158:	fe 01       	movw	r30, r28
    115a:	e7 59       	subi	r30, 0x97	; 151
    115c:	ff 4f       	sbci	r31, 0xFF	; 255
    115e:	80 81       	ld	r24, Z
    1160:	8a 95       	dec	r24
    1162:	f1 f7       	brne	.-4      	; 0x1160 <LCD_sendCommand+0x284>
    1164:	fe 01       	movw	r30, r28
    1166:	e7 59       	subi	r30, 0x97	; 151
    1168:	ff 4f       	sbci	r31, 0xFF	; 255
    116a:	80 83       	st	Z, r24
	_delay_us(1);
	SET_BIT(LCD_CTRL_PORT,E);
    116c:	a8 e3       	ldi	r26, 0x38	; 56
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e8 e3       	ldi	r30, 0x38	; 56
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	88 60       	ori	r24, 0x08	; 8
    1178:	8c 93       	st	X, r24
    117a:	fe 01       	movw	r30, r28
    117c:	eb 59       	subi	r30, 0x9B	; 155
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	a0 e8       	ldi	r26, 0x80	; 128
    1186:	bf e3       	ldi	r27, 0x3F	; 63
    1188:	80 83       	st	Z, r24
    118a:	91 83       	std	Z+1, r25	; 0x01
    118c:	a2 83       	std	Z+2, r26	; 0x02
    118e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1190:	8e 01       	movw	r16, r28
    1192:	0f 59       	subi	r16, 0x9F	; 159
    1194:	1f 4f       	sbci	r17, 0xFF	; 255
    1196:	fe 01       	movw	r30, r28
    1198:	eb 59       	subi	r30, 0x9B	; 155
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	60 81       	ld	r22, Z
    119e:	71 81       	ldd	r23, Z+1	; 0x01
    11a0:	82 81       	ldd	r24, Z+2	; 0x02
    11a2:	93 81       	ldd	r25, Z+3	; 0x03
    11a4:	2b ea       	ldi	r18, 0xAB	; 171
    11a6:	3a ea       	ldi	r19, 0xAA	; 170
    11a8:	4a ea       	ldi	r20, 0xAA	; 170
    11aa:	5e e3       	ldi	r21, 0x3E	; 62
    11ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	f8 01       	movw	r30, r16
    11b6:	80 83       	st	Z, r24
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	a2 83       	std	Z+2, r26	; 0x02
    11bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    11be:	fe 01       	movw	r30, r28
    11c0:	ef 59       	subi	r30, 0x9F	; 159
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	60 81       	ld	r22, Z
    11c6:	71 81       	ldd	r23, Z+1	; 0x01
    11c8:	82 81       	ldd	r24, Z+2	; 0x02
    11ca:	93 81       	ldd	r25, Z+3	; 0x03
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e8       	ldi	r20, 0x80	; 128
    11d2:	5f e3       	ldi	r21, 0x3F	; 63
    11d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11d8:	88 23       	and	r24, r24
    11da:	34 f4       	brge	.+12     	; 0x11e8 <LCD_sendCommand+0x30c>
		__ticks = 1;
    11dc:	fe 01       	movw	r30, r28
    11de:	e0 5a       	subi	r30, 0xA0	; 160
    11e0:	ff 4f       	sbci	r31, 0xFF	; 255
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	80 83       	st	Z, r24
    11e6:	e0 c0       	rjmp	.+448    	; 0x13a8 <LCD_sendCommand+0x4cc>
	else if (__tmp > 255)
    11e8:	fe 01       	movw	r30, r28
    11ea:	ef 59       	subi	r30, 0x9F	; 159
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	60 81       	ld	r22, Z
    11f0:	71 81       	ldd	r23, Z+1	; 0x01
    11f2:	82 81       	ldd	r24, Z+2	; 0x02
    11f4:	93 81       	ldd	r25, Z+3	; 0x03
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	4f e7       	ldi	r20, 0x7F	; 127
    11fc:	53 e4       	ldi	r21, 0x43	; 67
    11fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1202:	18 16       	cp	r1, r24
    1204:	0c f0       	brlt	.+2      	; 0x1208 <LCD_sendCommand+0x32c>
    1206:	c0 c0       	rjmp	.+384    	; 0x1388 <LCD_sendCommand+0x4ac>
	{
		_delay_ms(__us / 1000.0);
    1208:	fe 01       	movw	r30, r28
    120a:	eb 59       	subi	r30, 0x9B	; 155
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	60 81       	ld	r22, Z
    1210:	71 81       	ldd	r23, Z+1	; 0x01
    1212:	82 81       	ldd	r24, Z+2	; 0x02
    1214:	93 81       	ldd	r25, Z+3	; 0x03
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	4a e7       	ldi	r20, 0x7A	; 122
    121c:	54 e4       	ldi	r21, 0x44	; 68
    121e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	fe 01       	movw	r30, r28
    1228:	e4 5a       	subi	r30, 0xA4	; 164
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	80 83       	st	Z, r24
    122e:	91 83       	std	Z+1, r25	; 0x01
    1230:	a2 83       	std	Z+2, r26	; 0x02
    1232:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1234:	8e 01       	movw	r16, r28
    1236:	08 5a       	subi	r16, 0xA8	; 168
    1238:	1f 4f       	sbci	r17, 0xFF	; 255
    123a:	fe 01       	movw	r30, r28
    123c:	e4 5a       	subi	r30, 0xA4	; 164
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	60 81       	ld	r22, Z
    1242:	71 81       	ldd	r23, Z+1	; 0x01
    1244:	82 81       	ldd	r24, Z+2	; 0x02
    1246:	93 81       	ldd	r25, Z+3	; 0x03
    1248:	20 e0       	ldi	r18, 0x00	; 0
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	4a e7       	ldi	r20, 0x7A	; 122
    124e:	53 e4       	ldi	r21, 0x43	; 67
    1250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1254:	dc 01       	movw	r26, r24
    1256:	cb 01       	movw	r24, r22
    1258:	f8 01       	movw	r30, r16
    125a:	80 83       	st	Z, r24
    125c:	91 83       	std	Z+1, r25	; 0x01
    125e:	a2 83       	std	Z+2, r26	; 0x02
    1260:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1262:	fe 01       	movw	r30, r28
    1264:	e8 5a       	subi	r30, 0xA8	; 168
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	60 81       	ld	r22, Z
    126a:	71 81       	ldd	r23, Z+1	; 0x01
    126c:	82 81       	ldd	r24, Z+2	; 0x02
    126e:	93 81       	ldd	r25, Z+3	; 0x03
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e8       	ldi	r20, 0x80	; 128
    1276:	5f e3       	ldi	r21, 0x3F	; 63
    1278:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    127c:	88 23       	and	r24, r24
    127e:	44 f4       	brge	.+16     	; 0x1290 <LCD_sendCommand+0x3b4>
		__ticks = 1;
    1280:	fe 01       	movw	r30, r28
    1282:	ea 5a       	subi	r30, 0xAA	; 170
    1284:	ff 4f       	sbci	r31, 0xFF	; 255
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	91 83       	std	Z+1, r25	; 0x01
    128c:	80 83       	st	Z, r24
    128e:	64 c0       	rjmp	.+200    	; 0x1358 <LCD_sendCommand+0x47c>
	else if (__tmp > 65535)
    1290:	fe 01       	movw	r30, r28
    1292:	e8 5a       	subi	r30, 0xA8	; 168
    1294:	ff 4f       	sbci	r31, 0xFF	; 255
    1296:	60 81       	ld	r22, Z
    1298:	71 81       	ldd	r23, Z+1	; 0x01
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	93 81       	ldd	r25, Z+3	; 0x03
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	3f ef       	ldi	r19, 0xFF	; 255
    12a2:	4f e7       	ldi	r20, 0x7F	; 127
    12a4:	57 e4       	ldi	r21, 0x47	; 71
    12a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    12aa:	18 16       	cp	r1, r24
    12ac:	0c f0       	brlt	.+2      	; 0x12b0 <LCD_sendCommand+0x3d4>
    12ae:	43 c0       	rjmp	.+134    	; 0x1336 <LCD_sendCommand+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b0:	fe 01       	movw	r30, r28
    12b2:	e4 5a       	subi	r30, 0xA4	; 164
    12b4:	ff 4f       	sbci	r31, 0xFF	; 255
    12b6:	60 81       	ld	r22, Z
    12b8:	71 81       	ldd	r23, Z+1	; 0x01
    12ba:	82 81       	ldd	r24, Z+2	; 0x02
    12bc:	93 81       	ldd	r25, Z+3	; 0x03
    12be:	20 e0       	ldi	r18, 0x00	; 0
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	40 e2       	ldi	r20, 0x20	; 32
    12c4:	51 e4       	ldi	r21, 0x41	; 65
    12c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ca:	dc 01       	movw	r26, r24
    12cc:	cb 01       	movw	r24, r22
    12ce:	8e 01       	movw	r16, r28
    12d0:	0a 5a       	subi	r16, 0xAA	; 170
    12d2:	1f 4f       	sbci	r17, 0xFF	; 255
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12dc:	dc 01       	movw	r26, r24
    12de:	cb 01       	movw	r24, r22
    12e0:	f8 01       	movw	r30, r16
    12e2:	91 83       	std	Z+1, r25	; 0x01
    12e4:	80 83       	st	Z, r24
    12e6:	1f c0       	rjmp	.+62     	; 0x1326 <LCD_sendCommand+0x44a>
    12e8:	fe 01       	movw	r30, r28
    12ea:	ec 5a       	subi	r30, 0xAC	; 172
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	89 e1       	ldi	r24, 0x19	; 25
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	91 83       	std	Z+1, r25	; 0x01
    12f4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12f6:	fe 01       	movw	r30, r28
    12f8:	ec 5a       	subi	r30, 0xAC	; 172
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	80 81       	ld	r24, Z
    12fe:	91 81       	ldd	r25, Z+1	; 0x01
    1300:	01 97       	sbiw	r24, 0x01	; 1
    1302:	f1 f7       	brne	.-4      	; 0x1300 <LCD_sendCommand+0x424>
    1304:	fe 01       	movw	r30, r28
    1306:	ec 5a       	subi	r30, 0xAC	; 172
    1308:	ff 4f       	sbci	r31, 0xFF	; 255
    130a:	91 83       	std	Z+1, r25	; 0x01
    130c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130e:	de 01       	movw	r26, r28
    1310:	aa 5a       	subi	r26, 0xAA	; 170
    1312:	bf 4f       	sbci	r27, 0xFF	; 255
    1314:	fe 01       	movw	r30, r28
    1316:	ea 5a       	subi	r30, 0xAA	; 170
    1318:	ff 4f       	sbci	r31, 0xFF	; 255
    131a:	80 81       	ld	r24, Z
    131c:	91 81       	ldd	r25, Z+1	; 0x01
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	11 96       	adiw	r26, 0x01	; 1
    1322:	9c 93       	st	X, r25
    1324:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1326:	fe 01       	movw	r30, r28
    1328:	ea 5a       	subi	r30, 0xAA	; 170
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	80 81       	ld	r24, Z
    132e:	91 81       	ldd	r25, Z+1	; 0x01
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	d1 f6       	brne	.-76     	; 0x12e8 <LCD_sendCommand+0x40c>
    1334:	4b c0       	rjmp	.+150    	; 0x13cc <LCD_sendCommand+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1336:	8e 01       	movw	r16, r28
    1338:	0a 5a       	subi	r16, 0xAA	; 170
    133a:	1f 4f       	sbci	r17, 0xFF	; 255
    133c:	fe 01       	movw	r30, r28
    133e:	e8 5a       	subi	r30, 0xA8	; 168
    1340:	ff 4f       	sbci	r31, 0xFF	; 255
    1342:	60 81       	ld	r22, Z
    1344:	71 81       	ldd	r23, Z+1	; 0x01
    1346:	82 81       	ldd	r24, Z+2	; 0x02
    1348:	93 81       	ldd	r25, Z+3	; 0x03
    134a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	f8 01       	movw	r30, r16
    1354:	91 83       	std	Z+1, r25	; 0x01
    1356:	80 83       	st	Z, r24
    1358:	de 01       	movw	r26, r28
    135a:	ae 5a       	subi	r26, 0xAE	; 174
    135c:	bf 4f       	sbci	r27, 0xFF	; 255
    135e:	fe 01       	movw	r30, r28
    1360:	ea 5a       	subi	r30, 0xAA	; 170
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	80 81       	ld	r24, Z
    1366:	91 81       	ldd	r25, Z+1	; 0x01
    1368:	11 96       	adiw	r26, 0x01	; 1
    136a:	9c 93       	st	X, r25
    136c:	8e 93       	st	-X, r24
    136e:	fe 01       	movw	r30, r28
    1370:	ee 5a       	subi	r30, 0xAE	; 174
    1372:	ff 4f       	sbci	r31, 0xFF	; 255
    1374:	80 81       	ld	r24, Z
    1376:	91 81       	ldd	r25, Z+1	; 0x01
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	f1 f7       	brne	.-4      	; 0x1378 <LCD_sendCommand+0x49c>
    137c:	fe 01       	movw	r30, r28
    137e:	ee 5a       	subi	r30, 0xAE	; 174
    1380:	ff 4f       	sbci	r31, 0xFF	; 255
    1382:	91 83       	std	Z+1, r25	; 0x01
    1384:	80 83       	st	Z, r24
    1386:	22 c0       	rjmp	.+68     	; 0x13cc <LCD_sendCommand+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1388:	8e 01       	movw	r16, r28
    138a:	00 5a       	subi	r16, 0xA0	; 160
    138c:	1f 4f       	sbci	r17, 0xFF	; 255
    138e:	fe 01       	movw	r30, r28
    1390:	ef 59       	subi	r30, 0x9F	; 159
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	60 81       	ld	r22, Z
    1396:	71 81       	ldd	r23, Z+1	; 0x01
    1398:	82 81       	ldd	r24, Z+2	; 0x02
    139a:	93 81       	ldd	r25, Z+3	; 0x03
    139c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a0:	dc 01       	movw	r26, r24
    13a2:	cb 01       	movw	r24, r22
    13a4:	f8 01       	movw	r30, r16
    13a6:	80 83       	st	Z, r24
    13a8:	de 01       	movw	r26, r28
    13aa:	af 5a       	subi	r26, 0xAF	; 175
    13ac:	bf 4f       	sbci	r27, 0xFF	; 255
    13ae:	fe 01       	movw	r30, r28
    13b0:	e0 5a       	subi	r30, 0xA0	; 160
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	80 81       	ld	r24, Z
    13b6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13b8:	fe 01       	movw	r30, r28
    13ba:	ef 5a       	subi	r30, 0xAF	; 175
    13bc:	ff 4f       	sbci	r31, 0xFF	; 255
    13be:	80 81       	ld	r24, Z
    13c0:	8a 95       	dec	r24
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <LCD_sendCommand+0x4e4>
    13c4:	fe 01       	movw	r30, r28
    13c6:	ef 5a       	subi	r30, 0xAF	; 175
    13c8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ca:	80 83       	st	Z, r24
	_delay_us(1);
	#if(DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (a_command & 0xF0);
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((a_command & 0xF0) >>4);
    13cc:	a2 e3       	ldi	r26, 0x32	; 50
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e2 e3       	ldi	r30, 0x32	; 50
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	98 2f       	mov	r25, r24
    13d8:	90 7f       	andi	r25, 0xF0	; 240
    13da:	fe 01       	movw	r30, r28
    13dc:	ef 57       	subi	r30, 0x7F	; 127
    13de:	ff 4f       	sbci	r31, 0xFF	; 255
    13e0:	80 81       	ld	r24, Z
    13e2:	82 95       	swap	r24
    13e4:	8f 70       	andi	r24, 0x0F	; 15
    13e6:	89 2b       	or	r24, r25
    13e8:	8c 93       	st	X, r24
    13ea:	fe 01       	movw	r30, r28
    13ec:	e3 5b       	subi	r30, 0xB3	; 179
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	a0 e8       	ldi	r26, 0x80	; 128
    13f6:	bf e3       	ldi	r27, 0x3F	; 63
    13f8:	80 83       	st	Z, r24
    13fa:	91 83       	std	Z+1, r25	; 0x01
    13fc:	a2 83       	std	Z+2, r26	; 0x02
    13fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1400:	8e 01       	movw	r16, r28
    1402:	07 5b       	subi	r16, 0xB7	; 183
    1404:	1f 4f       	sbci	r17, 0xFF	; 255
    1406:	fe 01       	movw	r30, r28
    1408:	e3 5b       	subi	r30, 0xB3	; 179
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	60 81       	ld	r22, Z
    140e:	71 81       	ldd	r23, Z+1	; 0x01
    1410:	82 81       	ldd	r24, Z+2	; 0x02
    1412:	93 81       	ldd	r25, Z+3	; 0x03
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	4a e7       	ldi	r20, 0x7A	; 122
    141a:	53 e4       	ldi	r21, 0x43	; 67
    141c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1420:	dc 01       	movw	r26, r24
    1422:	cb 01       	movw	r24, r22
    1424:	f8 01       	movw	r30, r16
    1426:	80 83       	st	Z, r24
    1428:	91 83       	std	Z+1, r25	; 0x01
    142a:	a2 83       	std	Z+2, r26	; 0x02
    142c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    142e:	fe 01       	movw	r30, r28
    1430:	e7 5b       	subi	r30, 0xB7	; 183
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	60 81       	ld	r22, Z
    1436:	71 81       	ldd	r23, Z+1	; 0x01
    1438:	82 81       	ldd	r24, Z+2	; 0x02
    143a:	93 81       	ldd	r25, Z+3	; 0x03
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e8       	ldi	r20, 0x80	; 128
    1442:	5f e3       	ldi	r21, 0x3F	; 63
    1444:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1448:	88 23       	and	r24, r24
    144a:	44 f4       	brge	.+16     	; 0x145c <LCD_sendCommand+0x580>
		__ticks = 1;
    144c:	fe 01       	movw	r30, r28
    144e:	e9 5b       	subi	r30, 0xB9	; 185
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	91 83       	std	Z+1, r25	; 0x01
    1458:	80 83       	st	Z, r24
    145a:	64 c0       	rjmp	.+200    	; 0x1524 <LCD_sendCommand+0x648>
	else if (__tmp > 65535)
    145c:	fe 01       	movw	r30, r28
    145e:	e7 5b       	subi	r30, 0xB7	; 183
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	60 81       	ld	r22, Z
    1464:	71 81       	ldd	r23, Z+1	; 0x01
    1466:	82 81       	ldd	r24, Z+2	; 0x02
    1468:	93 81       	ldd	r25, Z+3	; 0x03
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	3f ef       	ldi	r19, 0xFF	; 255
    146e:	4f e7       	ldi	r20, 0x7F	; 127
    1470:	57 e4       	ldi	r21, 0x47	; 71
    1472:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1476:	18 16       	cp	r1, r24
    1478:	0c f0       	brlt	.+2      	; 0x147c <LCD_sendCommand+0x5a0>
    147a:	43 c0       	rjmp	.+134    	; 0x1502 <LCD_sendCommand+0x626>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147c:	fe 01       	movw	r30, r28
    147e:	e3 5b       	subi	r30, 0xB3	; 179
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	60 81       	ld	r22, Z
    1484:	71 81       	ldd	r23, Z+1	; 0x01
    1486:	82 81       	ldd	r24, Z+2	; 0x02
    1488:	93 81       	ldd	r25, Z+3	; 0x03
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e2       	ldi	r20, 0x20	; 32
    1490:	51 e4       	ldi	r21, 0x41	; 65
    1492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	8e 01       	movw	r16, r28
    149c:	09 5b       	subi	r16, 0xB9	; 185
    149e:	1f 4f       	sbci	r17, 0xFF	; 255
    14a0:	bc 01       	movw	r22, r24
    14a2:	cd 01       	movw	r24, r26
    14a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	f8 01       	movw	r30, r16
    14ae:	91 83       	std	Z+1, r25	; 0x01
    14b0:	80 83       	st	Z, r24
    14b2:	1f c0       	rjmp	.+62     	; 0x14f2 <LCD_sendCommand+0x616>
    14b4:	fe 01       	movw	r30, r28
    14b6:	eb 5b       	subi	r30, 0xBB	; 187
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	89 e1       	ldi	r24, 0x19	; 25
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	91 83       	std	Z+1, r25	; 0x01
    14c0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14c2:	fe 01       	movw	r30, r28
    14c4:	eb 5b       	subi	r30, 0xBB	; 187
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	80 81       	ld	r24, Z
    14ca:	91 81       	ldd	r25, Z+1	; 0x01
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <LCD_sendCommand+0x5f0>
    14d0:	fe 01       	movw	r30, r28
    14d2:	eb 5b       	subi	r30, 0xBB	; 187
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	91 83       	std	Z+1, r25	; 0x01
    14d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14da:	de 01       	movw	r26, r28
    14dc:	a9 5b       	subi	r26, 0xB9	; 185
    14de:	bf 4f       	sbci	r27, 0xFF	; 255
    14e0:	fe 01       	movw	r30, r28
    14e2:	e9 5b       	subi	r30, 0xB9	; 185
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	80 81       	ld	r24, Z
    14e8:	91 81       	ldd	r25, Z+1	; 0x01
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	11 96       	adiw	r26, 0x01	; 1
    14ee:	9c 93       	st	X, r25
    14f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f2:	fe 01       	movw	r30, r28
    14f4:	e9 5b       	subi	r30, 0xB9	; 185
    14f6:	ff 4f       	sbci	r31, 0xFF	; 255
    14f8:	80 81       	ld	r24, Z
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	00 97       	sbiw	r24, 0x00	; 0
    14fe:	d1 f6       	brne	.-76     	; 0x14b4 <LCD_sendCommand+0x5d8>
    1500:	27 c0       	rjmp	.+78     	; 0x1550 <LCD_sendCommand+0x674>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1502:	8e 01       	movw	r16, r28
    1504:	09 5b       	subi	r16, 0xB9	; 185
    1506:	1f 4f       	sbci	r17, 0xFF	; 255
    1508:	fe 01       	movw	r30, r28
    150a:	e7 5b       	subi	r30, 0xB7	; 183
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	60 81       	ld	r22, Z
    1510:	71 81       	ldd	r23, Z+1	; 0x01
    1512:	82 81       	ldd	r24, Z+2	; 0x02
    1514:	93 81       	ldd	r25, Z+3	; 0x03
    1516:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	f8 01       	movw	r30, r16
    1520:	91 83       	std	Z+1, r25	; 0x01
    1522:	80 83       	st	Z, r24
    1524:	de 01       	movw	r26, r28
    1526:	ad 5b       	subi	r26, 0xBD	; 189
    1528:	bf 4f       	sbci	r27, 0xFF	; 255
    152a:	fe 01       	movw	r30, r28
    152c:	e9 5b       	subi	r30, 0xB9	; 185
    152e:	ff 4f       	sbci	r31, 0xFF	; 255
    1530:	80 81       	ld	r24, Z
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	8d 93       	st	X+, r24
    1536:	9c 93       	st	X, r25
    1538:	fe 01       	movw	r30, r28
    153a:	ed 5b       	subi	r30, 0xBD	; 189
    153c:	ff 4f       	sbci	r31, 0xFF	; 255
    153e:	80 81       	ld	r24, Z
    1540:	91 81       	ldd	r25, Z+1	; 0x01
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD_sendCommand+0x666>
    1546:	fe 01       	movw	r30, r28
    1548:	ed 5b       	subi	r30, 0xBD	; 189
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	91 83       	std	Z+1, r25	; 0x01
    154e:	80 83       	st	Z, r24
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT,E);
    1550:	a8 e3       	ldi	r26, 0x38	; 56
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e8 e3       	ldi	r30, 0x38	; 56
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	87 7f       	andi	r24, 0xF7	; 247
    155c:	8c 93       	st	X, r24
    155e:	fe 01       	movw	r30, r28
    1560:	ff 96       	adiw	r30, 0x3f	; 63
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	a0 e8       	ldi	r26, 0x80	; 128
    1568:	bf e3       	ldi	r27, 0x3F	; 63
    156a:	80 83       	st	Z, r24
    156c:	91 83       	std	Z+1, r25	; 0x01
    156e:	a2 83       	std	Z+2, r26	; 0x02
    1570:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1572:	fe 01       	movw	r30, r28
    1574:	ff 96       	adiw	r30, 0x3f	; 63
    1576:	60 81       	ld	r22, Z
    1578:	71 81       	ldd	r23, Z+1	; 0x01
    157a:	82 81       	ldd	r24, Z+2	; 0x02
    157c:	93 81       	ldd	r25, Z+3	; 0x03
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	4a e7       	ldi	r20, 0x7A	; 122
    1584:	53 e4       	ldi	r21, 0x43	; 67
    1586:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158a:	dc 01       	movw	r26, r24
    158c:	cb 01       	movw	r24, r22
    158e:	8b af       	std	Y+59, r24	; 0x3b
    1590:	9c af       	std	Y+60, r25	; 0x3c
    1592:	ad af       	std	Y+61, r26	; 0x3d
    1594:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    1596:	6b ad       	ldd	r22, Y+59	; 0x3b
    1598:	7c ad       	ldd	r23, Y+60	; 0x3c
    159a:	8d ad       	ldd	r24, Y+61	; 0x3d
    159c:	9e ad       	ldd	r25, Y+62	; 0x3e
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15aa:	88 23       	and	r24, r24
    15ac:	2c f4       	brge	.+10     	; 0x15b8 <LCD_sendCommand+0x6dc>
		__ticks = 1;
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	9a af       	std	Y+58, r25	; 0x3a
    15b4:	89 af       	std	Y+57, r24	; 0x39
    15b6:	41 c0       	rjmp	.+130    	; 0x163a <LCD_sendCommand+0x75e>
	else if (__tmp > 65535)
    15b8:	6b ad       	ldd	r22, Y+59	; 0x3b
    15ba:	7c ad       	ldd	r23, Y+60	; 0x3c
    15bc:	8d ad       	ldd	r24, Y+61	; 0x3d
    15be:	9e ad       	ldd	r25, Y+62	; 0x3e
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	3f ef       	ldi	r19, 0xFF	; 255
    15c4:	4f e7       	ldi	r20, 0x7F	; 127
    15c6:	57 e4       	ldi	r21, 0x47	; 71
    15c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15cc:	18 16       	cp	r1, r24
    15ce:	5c f5       	brge	.+86     	; 0x1626 <LCD_sendCommand+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15d0:	fe 01       	movw	r30, r28
    15d2:	ff 96       	adiw	r30, 0x3f	; 63
    15d4:	60 81       	ld	r22, Z
    15d6:	71 81       	ldd	r23, Z+1	; 0x01
    15d8:	82 81       	ldd	r24, Z+2	; 0x02
    15da:	93 81       	ldd	r25, Z+3	; 0x03
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	40 e2       	ldi	r20, 0x20	; 32
    15e2:	51 e4       	ldi	r21, 0x41	; 65
    15e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	bc 01       	movw	r22, r24
    15ee:	cd 01       	movw	r24, r26
    15f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f4:	dc 01       	movw	r26, r24
    15f6:	cb 01       	movw	r24, r22
    15f8:	9a af       	std	Y+58, r25	; 0x3a
    15fa:	89 af       	std	Y+57, r24	; 0x39
    15fc:	0f c0       	rjmp	.+30     	; 0x161c <LCD_sendCommand+0x740>
    15fe:	89 e1       	ldi	r24, 0x19	; 25
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	98 af       	std	Y+56, r25	; 0x38
    1604:	8f ab       	std	Y+55, r24	; 0x37
    1606:	8f a9       	ldd	r24, Y+55	; 0x37
    1608:	98 ad       	ldd	r25, Y+56	; 0x38
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <LCD_sendCommand+0x72e>
    160e:	98 af       	std	Y+56, r25	; 0x38
    1610:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1612:	89 ad       	ldd	r24, Y+57	; 0x39
    1614:	9a ad       	ldd	r25, Y+58	; 0x3a
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	9a af       	std	Y+58, r25	; 0x3a
    161a:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    161c:	89 ad       	ldd	r24, Y+57	; 0x39
    161e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1620:	00 97       	sbiw	r24, 0x00	; 0
    1622:	69 f7       	brne	.-38     	; 0x15fe <LCD_sendCommand+0x722>
    1624:	14 c0       	rjmp	.+40     	; 0x164e <LCD_sendCommand+0x772>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1626:	6b ad       	ldd	r22, Y+59	; 0x3b
    1628:	7c ad       	ldd	r23, Y+60	; 0x3c
    162a:	8d ad       	ldd	r24, Y+61	; 0x3d
    162c:	9e ad       	ldd	r25, Y+62	; 0x3e
    162e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	9a af       	std	Y+58, r25	; 0x3a
    1638:	89 af       	std	Y+57, r24	; 0x39
    163a:	89 ad       	ldd	r24, Y+57	; 0x39
    163c:	9a ad       	ldd	r25, Y+58	; 0x3a
    163e:	9e ab       	std	Y+54, r25	; 0x36
    1640:	8d ab       	std	Y+53, r24	; 0x35
    1642:	8d a9       	ldd	r24, Y+53	; 0x35
    1644:	9e a9       	ldd	r25, Y+54	; 0x36
    1646:	01 97       	sbiw	r24, 0x01	; 1
    1648:	f1 f7       	brne	.-4      	; 0x1646 <LCD_sendCommand+0x76a>
    164a:	9e ab       	std	Y+54, r25	; 0x36
    164c:	8d ab       	std	Y+53, r24	; 0x35
		_delay_ms(1);
		SET_BIT(LCD_CTRL_PORT,E);
    164e:	a8 e3       	ldi	r26, 0x38	; 56
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e8 e3       	ldi	r30, 0x38	; 56
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	88 60       	ori	r24, 0x08	; 8
    165a:	8c 93       	st	X, r24
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a0 e8       	ldi	r26, 0x80	; 128
    1662:	bf e3       	ldi	r27, 0x3F	; 63
    1664:	89 ab       	std	Y+49, r24	; 0x31
    1666:	9a ab       	std	Y+50, r25	; 0x32
    1668:	ab ab       	std	Y+51, r26	; 0x33
    166a:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    166c:	69 a9       	ldd	r22, Y+49	; 0x31
    166e:	7a a9       	ldd	r23, Y+50	; 0x32
    1670:	8b a9       	ldd	r24, Y+51	; 0x33
    1672:	9c a9       	ldd	r25, Y+52	; 0x34
    1674:	2b ea       	ldi	r18, 0xAB	; 171
    1676:	3a ea       	ldi	r19, 0xAA	; 170
    1678:	4a ea       	ldi	r20, 0xAA	; 170
    167a:	5e e3       	ldi	r21, 0x3E	; 62
    167c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1680:	dc 01       	movw	r26, r24
    1682:	cb 01       	movw	r24, r22
    1684:	8d a7       	std	Y+45, r24	; 0x2d
    1686:	9e a7       	std	Y+46, r25	; 0x2e
    1688:	af a7       	std	Y+47, r26	; 0x2f
    168a:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    168c:	6d a5       	ldd	r22, Y+45	; 0x2d
    168e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1690:	8f a5       	ldd	r24, Y+47	; 0x2f
    1692:	98 a9       	ldd	r25, Y+48	; 0x30
    1694:	20 e0       	ldi	r18, 0x00	; 0
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	40 e8       	ldi	r20, 0x80	; 128
    169a:	5f e3       	ldi	r21, 0x3F	; 63
    169c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16a0:	88 23       	and	r24, r24
    16a2:	1c f4       	brge	.+6      	; 0x16aa <LCD_sendCommand+0x7ce>
		__ticks = 1;
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	8c a7       	std	Y+44, r24	; 0x2c
    16a8:	91 c0       	rjmp	.+290    	; 0x17cc <LCD_sendCommand+0x8f0>
	else if (__tmp > 255)
    16aa:	6d a5       	ldd	r22, Y+45	; 0x2d
    16ac:	7e a5       	ldd	r23, Y+46	; 0x2e
    16ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    16b0:	98 a9       	ldd	r25, Y+48	; 0x30
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	4f e7       	ldi	r20, 0x7F	; 127
    16b8:	53 e4       	ldi	r21, 0x43	; 67
    16ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16be:	18 16       	cp	r1, r24
    16c0:	0c f0       	brlt	.+2      	; 0x16c4 <LCD_sendCommand+0x7e8>
    16c2:	7b c0       	rjmp	.+246    	; 0x17ba <LCD_sendCommand+0x8de>
	{
		_delay_ms(__us / 1000.0);
    16c4:	69 a9       	ldd	r22, Y+49	; 0x31
    16c6:	7a a9       	ldd	r23, Y+50	; 0x32
    16c8:	8b a9       	ldd	r24, Y+51	; 0x33
    16ca:	9c a9       	ldd	r25, Y+52	; 0x34
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	4a e7       	ldi	r20, 0x7A	; 122
    16d2:	54 e4       	ldi	r21, 0x44	; 68
    16d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	88 a7       	std	Y+40, r24	; 0x28
    16de:	99 a7       	std	Y+41, r25	; 0x29
    16e0:	aa a7       	std	Y+42, r26	; 0x2a
    16e2:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e4:	68 a5       	ldd	r22, Y+40	; 0x28
    16e6:	79 a5       	ldd	r23, Y+41	; 0x29
    16e8:	8a a5       	ldd	r24, Y+42	; 0x2a
    16ea:	9b a5       	ldd	r25, Y+43	; 0x2b
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	4a e7       	ldi	r20, 0x7A	; 122
    16f2:	53 e4       	ldi	r21, 0x43	; 67
    16f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	8c a3       	std	Y+36, r24	; 0x24
    16fe:	9d a3       	std	Y+37, r25	; 0x25
    1700:	ae a3       	std	Y+38, r26	; 0x26
    1702:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    1704:	6c a1       	ldd	r22, Y+36	; 0x24
    1706:	7d a1       	ldd	r23, Y+37	; 0x25
    1708:	8e a1       	ldd	r24, Y+38	; 0x26
    170a:	9f a1       	ldd	r25, Y+39	; 0x27
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e8       	ldi	r20, 0x80	; 128
    1712:	5f e3       	ldi	r21, 0x3F	; 63
    1714:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1718:	88 23       	and	r24, r24
    171a:	2c f4       	brge	.+10     	; 0x1726 <LCD_sendCommand+0x84a>
		__ticks = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9b a3       	std	Y+35, r25	; 0x23
    1722:	8a a3       	std	Y+34, r24	; 0x22
    1724:	3f c0       	rjmp	.+126    	; 0x17a4 <LCD_sendCommand+0x8c8>
	else if (__tmp > 65535)
    1726:	6c a1       	ldd	r22, Y+36	; 0x24
    1728:	7d a1       	ldd	r23, Y+37	; 0x25
    172a:	8e a1       	ldd	r24, Y+38	; 0x26
    172c:	9f a1       	ldd	r25, Y+39	; 0x27
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	3f ef       	ldi	r19, 0xFF	; 255
    1732:	4f e7       	ldi	r20, 0x7F	; 127
    1734:	57 e4       	ldi	r21, 0x47	; 71
    1736:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    173a:	18 16       	cp	r1, r24
    173c:	4c f5       	brge	.+82     	; 0x1790 <LCD_sendCommand+0x8b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173e:	68 a5       	ldd	r22, Y+40	; 0x28
    1740:	79 a5       	ldd	r23, Y+41	; 0x29
    1742:	8a a5       	ldd	r24, Y+42	; 0x2a
    1744:	9b a5       	ldd	r25, Y+43	; 0x2b
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e2       	ldi	r20, 0x20	; 32
    174c:	51 e4       	ldi	r21, 0x41	; 65
    174e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	bc 01       	movw	r22, r24
    1758:	cd 01       	movw	r24, r26
    175a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	9b a3       	std	Y+35, r25	; 0x23
    1764:	8a a3       	std	Y+34, r24	; 0x22
    1766:	0f c0       	rjmp	.+30     	; 0x1786 <LCD_sendCommand+0x8aa>
    1768:	89 e1       	ldi	r24, 0x19	; 25
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	99 a3       	std	Y+33, r25	; 0x21
    176e:	88 a3       	std	Y+32, r24	; 0x20
    1770:	88 a1       	ldd	r24, Y+32	; 0x20
    1772:	99 a1       	ldd	r25, Y+33	; 0x21
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <LCD_sendCommand+0x898>
    1778:	99 a3       	std	Y+33, r25	; 0x21
    177a:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177c:	8a a1       	ldd	r24, Y+34	; 0x22
    177e:	9b a1       	ldd	r25, Y+35	; 0x23
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	9b a3       	std	Y+35, r25	; 0x23
    1784:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1786:	8a a1       	ldd	r24, Y+34	; 0x22
    1788:	9b a1       	ldd	r25, Y+35	; 0x23
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	69 f7       	brne	.-38     	; 0x1768 <LCD_sendCommand+0x88c>
    178e:	24 c0       	rjmp	.+72     	; 0x17d8 <LCD_sendCommand+0x8fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1790:	6c a1       	ldd	r22, Y+36	; 0x24
    1792:	7d a1       	ldd	r23, Y+37	; 0x25
    1794:	8e a1       	ldd	r24, Y+38	; 0x26
    1796:	9f a1       	ldd	r25, Y+39	; 0x27
    1798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	9b a3       	std	Y+35, r25	; 0x23
    17a2:	8a a3       	std	Y+34, r24	; 0x22
    17a4:	8a a1       	ldd	r24, Y+34	; 0x22
    17a6:	9b a1       	ldd	r25, Y+35	; 0x23
    17a8:	9f 8f       	std	Y+31, r25	; 0x1f
    17aa:	8e 8f       	std	Y+30, r24	; 0x1e
    17ac:	8e 8d       	ldd	r24, Y+30	; 0x1e
    17ae:	9f 8d       	ldd	r25, Y+31	; 0x1f
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <LCD_sendCommand+0x8d4>
    17b4:	9f 8f       	std	Y+31, r25	; 0x1f
    17b6:	8e 8f       	std	Y+30, r24	; 0x1e
    17b8:	0f c0       	rjmp	.+30     	; 0x17d8 <LCD_sendCommand+0x8fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    17ba:	6d a5       	ldd	r22, Y+45	; 0x2d
    17bc:	7e a5       	ldd	r23, Y+46	; 0x2e
    17be:	8f a5       	ldd	r24, Y+47	; 0x2f
    17c0:	98 a9       	ldd	r25, Y+48	; 0x30
    17c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	8c a7       	std	Y+44, r24	; 0x2c
    17cc:	8c a5       	ldd	r24, Y+44	; 0x2c
    17ce:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    17d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    17d2:	8a 95       	dec	r24
    17d4:	f1 f7       	brne	.-4      	; 0x17d2 <LCD_sendCommand+0x8f6>
    17d6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_us(1);
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((a_command & 0x0F) << 4);
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (a_command & 0x0F);
    17d8:	a2 e3       	ldi	r26, 0x32	; 50
    17da:	b0 e0       	ldi	r27, 0x00	; 0
    17dc:	e2 e3       	ldi	r30, 0x32	; 50
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	80 81       	ld	r24, Z
    17e2:	98 2f       	mov	r25, r24
    17e4:	90 7f       	andi	r25, 0xF0	; 240
    17e6:	fe 01       	movw	r30, r28
    17e8:	ef 57       	subi	r30, 0x7F	; 127
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	80 81       	ld	r24, Z
    17ee:	8f 70       	andi	r24, 0x0F	; 15
    17f0:	89 2b       	or	r24, r25
    17f2:	8c 93       	st	X, r24
    17f4:	80 e0       	ldi	r24, 0x00	; 0
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	a0 e8       	ldi	r26, 0x80	; 128
    17fa:	bf e3       	ldi	r27, 0x3F	; 63
    17fc:	89 8f       	std	Y+25, r24	; 0x19
    17fe:	9a 8f       	std	Y+26, r25	; 0x1a
    1800:	ab 8f       	std	Y+27, r26	; 0x1b
    1802:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1804:	69 8d       	ldd	r22, Y+25	; 0x19
    1806:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1808:	8b 8d       	ldd	r24, Y+27	; 0x1b
    180a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	4a e7       	ldi	r20, 0x7A	; 122
    1812:	53 e4       	ldi	r21, 0x43	; 67
    1814:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	8d 8b       	std	Y+21, r24	; 0x15
    181e:	9e 8b       	std	Y+22, r25	; 0x16
    1820:	af 8b       	std	Y+23, r26	; 0x17
    1822:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1824:	6d 89       	ldd	r22, Y+21	; 0x15
    1826:	7e 89       	ldd	r23, Y+22	; 0x16
    1828:	8f 89       	ldd	r24, Y+23	; 0x17
    182a:	98 8d       	ldd	r25, Y+24	; 0x18
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	40 e8       	ldi	r20, 0x80	; 128
    1832:	5f e3       	ldi	r21, 0x3F	; 63
    1834:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1838:	88 23       	and	r24, r24
    183a:	2c f4       	brge	.+10     	; 0x1846 <LCD_sendCommand+0x96a>
		__ticks = 1;
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	9c 8b       	std	Y+20, r25	; 0x14
    1842:	8b 8b       	std	Y+19, r24	; 0x13
    1844:	3f c0       	rjmp	.+126    	; 0x18c4 <LCD_sendCommand+0x9e8>
	else if (__tmp > 65535)
    1846:	6d 89       	ldd	r22, Y+21	; 0x15
    1848:	7e 89       	ldd	r23, Y+22	; 0x16
    184a:	8f 89       	ldd	r24, Y+23	; 0x17
    184c:	98 8d       	ldd	r25, Y+24	; 0x18
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	3f ef       	ldi	r19, 0xFF	; 255
    1852:	4f e7       	ldi	r20, 0x7F	; 127
    1854:	57 e4       	ldi	r21, 0x47	; 71
    1856:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    185a:	18 16       	cp	r1, r24
    185c:	4c f5       	brge	.+82     	; 0x18b0 <LCD_sendCommand+0x9d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    185e:	69 8d       	ldd	r22, Y+25	; 0x19
    1860:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1862:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1864:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1866:	20 e0       	ldi	r18, 0x00	; 0
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	40 e2       	ldi	r20, 0x20	; 32
    186c:	51 e4       	ldi	r21, 0x41	; 65
    186e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	bc 01       	movw	r22, r24
    1878:	cd 01       	movw	r24, r26
    187a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	9c 8b       	std	Y+20, r25	; 0x14
    1884:	8b 8b       	std	Y+19, r24	; 0x13
    1886:	0f c0       	rjmp	.+30     	; 0x18a6 <LCD_sendCommand+0x9ca>
    1888:	89 e1       	ldi	r24, 0x19	; 25
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	9a 8b       	std	Y+18, r25	; 0x12
    188e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1890:	89 89       	ldd	r24, Y+17	; 0x11
    1892:	9a 89       	ldd	r25, Y+18	; 0x12
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <LCD_sendCommand+0x9b8>
    1898:	9a 8b       	std	Y+18, r25	; 0x12
    189a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    189c:	8b 89       	ldd	r24, Y+19	; 0x13
    189e:	9c 89       	ldd	r25, Y+20	; 0x14
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	9c 8b       	std	Y+20, r25	; 0x14
    18a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18a6:	8b 89       	ldd	r24, Y+19	; 0x13
    18a8:	9c 89       	ldd	r25, Y+20	; 0x14
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	69 f7       	brne	.-38     	; 0x1888 <LCD_sendCommand+0x9ac>
    18ae:	14 c0       	rjmp	.+40     	; 0x18d8 <LCD_sendCommand+0x9fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18b0:	6d 89       	ldd	r22, Y+21	; 0x15
    18b2:	7e 89       	ldd	r23, Y+22	; 0x16
    18b4:	8f 89       	ldd	r24, Y+23	; 0x17
    18b6:	98 8d       	ldd	r25, Y+24	; 0x18
    18b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	9c 8b       	std	Y+20, r25	; 0x14
    18c2:	8b 8b       	std	Y+19, r24	; 0x13
    18c4:	8b 89       	ldd	r24, Y+19	; 0x13
    18c6:	9c 89       	ldd	r25, Y+20	; 0x14
    18c8:	98 8b       	std	Y+16, r25	; 0x10
    18ca:	8f 87       	std	Y+15, r24	; 0x0f
    18cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ce:	98 89       	ldd	r25, Y+16	; 0x10
    18d0:	01 97       	sbiw	r24, 0x01	; 1
    18d2:	f1 f7       	brne	.-4      	; 0x18d0 <LCD_sendCommand+0x9f4>
    18d4:	98 8b       	std	Y+16, r25	; 0x10
    18d6:	8f 87       	std	Y+15, r24	; 0x0f
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT,E);
    18d8:	a8 e3       	ldi	r26, 0x38	; 56
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e8 e3       	ldi	r30, 0x38	; 56
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	87 7f       	andi	r24, 0xF7	; 247
    18e4:	8c 93       	st	X, r24
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a0 e8       	ldi	r26, 0x80	; 128
    18ec:	bf e3       	ldi	r27, 0x3F	; 63
    18ee:	8b 87       	std	Y+11, r24	; 0x0b
    18f0:	9c 87       	std	Y+12, r25	; 0x0c
    18f2:	ad 87       	std	Y+13, r26	; 0x0d
    18f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	4a e7       	ldi	r20, 0x7A	; 122
    1904:	53 e4       	ldi	r21, 0x43	; 67
    1906:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	8f 83       	std	Y+7, r24	; 0x07
    1910:	98 87       	std	Y+8, r25	; 0x08
    1912:	a9 87       	std	Y+9, r26	; 0x09
    1914:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1916:	6f 81       	ldd	r22, Y+7	; 0x07
    1918:	78 85       	ldd	r23, Y+8	; 0x08
    191a:	89 85       	ldd	r24, Y+9	; 0x09
    191c:	9a 85       	ldd	r25, Y+10	; 0x0a
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e8       	ldi	r20, 0x80	; 128
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    192a:	88 23       	and	r24, r24
    192c:	2c f4       	brge	.+10     	; 0x1938 <LCD_sendCommand+0xa5c>
		__ticks = 1;
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	9e 83       	std	Y+6, r25	; 0x06
    1934:	8d 83       	std	Y+5, r24	; 0x05
    1936:	3f c0       	rjmp	.+126    	; 0x19b6 <LCD_sendCommand+0xada>
	else if (__tmp > 65535)
    1938:	6f 81       	ldd	r22, Y+7	; 0x07
    193a:	78 85       	ldd	r23, Y+8	; 0x08
    193c:	89 85       	ldd	r24, Y+9	; 0x09
    193e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	3f ef       	ldi	r19, 0xFF	; 255
    1944:	4f e7       	ldi	r20, 0x7F	; 127
    1946:	57 e4       	ldi	r21, 0x47	; 71
    1948:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    194c:	18 16       	cp	r1, r24
    194e:	4c f5       	brge	.+82     	; 0x19a2 <LCD_sendCommand+0xac6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1950:	6b 85       	ldd	r22, Y+11	; 0x0b
    1952:	7c 85       	ldd	r23, Y+12	; 0x0c
    1954:	8d 85       	ldd	r24, Y+13	; 0x0d
    1956:	9e 85       	ldd	r25, Y+14	; 0x0e
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e2       	ldi	r20, 0x20	; 32
    195e:	51 e4       	ldi	r21, 0x41	; 65
    1960:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	bc 01       	movw	r22, r24
    196a:	cd 01       	movw	r24, r26
    196c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	9e 83       	std	Y+6, r25	; 0x06
    1976:	8d 83       	std	Y+5, r24	; 0x05
    1978:	0f c0       	rjmp	.+30     	; 0x1998 <LCD_sendCommand+0xabc>
    197a:	89 e1       	ldi	r24, 0x19	; 25
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9c 83       	std	Y+4, r25	; 0x04
    1980:	8b 83       	std	Y+3, r24	; 0x03
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	9c 81       	ldd	r25, Y+4	; 0x04
    1986:	01 97       	sbiw	r24, 0x01	; 1
    1988:	f1 f7       	brne	.-4      	; 0x1986 <LCD_sendCommand+0xaaa>
    198a:	9c 83       	std	Y+4, r25	; 0x04
    198c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    198e:	8d 81       	ldd	r24, Y+5	; 0x05
    1990:	9e 81       	ldd	r25, Y+6	; 0x06
    1992:	01 97       	sbiw	r24, 0x01	; 1
    1994:	9e 83       	std	Y+6, r25	; 0x06
    1996:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1998:	8d 81       	ldd	r24, Y+5	; 0x05
    199a:	9e 81       	ldd	r25, Y+6	; 0x06
    199c:	00 97       	sbiw	r24, 0x00	; 0
    199e:	69 f7       	brne	.-38     	; 0x197a <LCD_sendCommand+0xa9e>
    19a0:	14 c0       	rjmp	.+40     	; 0x19ca <LCD_sendCommand+0xaee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19a2:	6f 81       	ldd	r22, Y+7	; 0x07
    19a4:	78 85       	ldd	r23, Y+8	; 0x08
    19a6:	89 85       	ldd	r24, Y+9	; 0x09
    19a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	9e 83       	std	Y+6, r25	; 0x06
    19b4:	8d 83       	std	Y+5, r24	; 0x05
    19b6:	8d 81       	ldd	r24, Y+5	; 0x05
    19b8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ba:	9a 83       	std	Y+2, r25	; 0x02
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	9a 81       	ldd	r25, Y+2	; 0x02
    19c2:	01 97       	sbiw	r24, 0x01	; 1
    19c4:	f1 f7       	brne	.-4      	; 0x19c2 <LCD_sendCommand+0xae6>
    19c6:	9a 83       	std	Y+2, r25	; 0x02
    19c8:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = a_command;
		_delay_us(1);
		CLEAR_BIT(LCD_CTRL_PORT,E);
		_delay_ms(1);
	#endif
}
    19ca:	cf 57       	subi	r28, 0x7F	; 127
    19cc:	df 4f       	sbci	r29, 0xFF	; 255
    19ce:	0f b6       	in	r0, 0x3f	; 63
    19d0:	f8 94       	cli
    19d2:	de bf       	out	0x3e, r29	; 62
    19d4:	0f be       	out	0x3f, r0	; 63
    19d6:	cd bf       	out	0x3d, r28	; 61
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	08 95       	ret

000019e2 <LCD_displayCharacter>:

void LCD_displayCharacter(const uint8 a_character)
{
    19e2:	0f 93       	push	r16
    19e4:	1f 93       	push	r17
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	c1 58       	subi	r28, 0x81	; 129
    19f0:	d0 40       	sbci	r29, 0x00	; 0
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	fe 01       	movw	r30, r28
    19fe:	ef 57       	subi	r30, 0x7F	; 127
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS);
    1a04:	a8 e3       	ldi	r26, 0x38	; 56
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	e8 e3       	ldi	r30, 0x38	; 56
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	82 60       	ori	r24, 0x02	; 2
    1a10:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);
    1a12:	a8 e3       	ldi	r26, 0x38	; 56
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e8 e3       	ldi	r30, 0x38	; 56
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	8b 7f       	andi	r24, 0xFB	; 251
    1a1e:	8c 93       	st	X, r24
    1a20:	fe 01       	movw	r30, r28
    1a22:	e3 58       	subi	r30, 0x83	; 131
    1a24:	ff 4f       	sbci	r31, 0xFF	; 255
    1a26:	80 e0       	ldi	r24, 0x00	; 0
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	a0 e8       	ldi	r26, 0x80	; 128
    1a2c:	bf e3       	ldi	r27, 0x3F	; 63
    1a2e:	80 83       	st	Z, r24
    1a30:	91 83       	std	Z+1, r25	; 0x01
    1a32:	a2 83       	std	Z+2, r26	; 0x02
    1a34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a36:	8e 01       	movw	r16, r28
    1a38:	07 58       	subi	r16, 0x87	; 135
    1a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3c:	fe 01       	movw	r30, r28
    1a3e:	e3 58       	subi	r30, 0x83	; 131
    1a40:	ff 4f       	sbci	r31, 0xFF	; 255
    1a42:	60 81       	ld	r22, Z
    1a44:	71 81       	ldd	r23, Z+1	; 0x01
    1a46:	82 81       	ldd	r24, Z+2	; 0x02
    1a48:	93 81       	ldd	r25, Z+3	; 0x03
    1a4a:	2b ea       	ldi	r18, 0xAB	; 171
    1a4c:	3a ea       	ldi	r19, 0xAA	; 170
    1a4e:	4a ea       	ldi	r20, 0xAA	; 170
    1a50:	5e e3       	ldi	r21, 0x3E	; 62
    1a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a56:	dc 01       	movw	r26, r24
    1a58:	cb 01       	movw	r24, r22
    1a5a:	f8 01       	movw	r30, r16
    1a5c:	80 83       	st	Z, r24
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	a2 83       	std	Z+2, r26	; 0x02
    1a62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a64:	fe 01       	movw	r30, r28
    1a66:	e7 58       	subi	r30, 0x87	; 135
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	60 81       	ld	r22, Z
    1a6c:	71 81       	ldd	r23, Z+1	; 0x01
    1a6e:	82 81       	ldd	r24, Z+2	; 0x02
    1a70:	93 81       	ldd	r25, Z+3	; 0x03
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	40 e8       	ldi	r20, 0x80	; 128
    1a78:	5f e3       	ldi	r21, 0x3F	; 63
    1a7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a7e:	88 23       	and	r24, r24
    1a80:	34 f4       	brge	.+12     	; 0x1a8e <LCD_displayCharacter+0xac>
		__ticks = 1;
    1a82:	fe 01       	movw	r30, r28
    1a84:	e8 58       	subi	r30, 0x88	; 136
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	80 83       	st	Z, r24
    1a8c:	e0 c0       	rjmp	.+448    	; 0x1c4e <LCD_displayCharacter+0x26c>
	else if (__tmp > 255)
    1a8e:	fe 01       	movw	r30, r28
    1a90:	e7 58       	subi	r30, 0x87	; 135
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	60 81       	ld	r22, Z
    1a96:	71 81       	ldd	r23, Z+1	; 0x01
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	93 81       	ldd	r25, Z+3	; 0x03
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	4f e7       	ldi	r20, 0x7F	; 127
    1aa2:	53 e4       	ldi	r21, 0x43	; 67
    1aa4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aa8:	18 16       	cp	r1, r24
    1aaa:	0c f0       	brlt	.+2      	; 0x1aae <LCD_displayCharacter+0xcc>
    1aac:	c0 c0       	rjmp	.+384    	; 0x1c2e <LCD_displayCharacter+0x24c>
	{
		_delay_ms(__us / 1000.0);
    1aae:	fe 01       	movw	r30, r28
    1ab0:	e3 58       	subi	r30, 0x83	; 131
    1ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab4:	60 81       	ld	r22, Z
    1ab6:	71 81       	ldd	r23, Z+1	; 0x01
    1ab8:	82 81       	ldd	r24, Z+2	; 0x02
    1aba:	93 81       	ldd	r25, Z+3	; 0x03
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	4a e7       	ldi	r20, 0x7A	; 122
    1ac2:	54 e4       	ldi	r21, 0x44	; 68
    1ac4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	fe 01       	movw	r30, r28
    1ace:	ec 58       	subi	r30, 0x8C	; 140
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	80 83       	st	Z, r24
    1ad4:	91 83       	std	Z+1, r25	; 0x01
    1ad6:	a2 83       	std	Z+2, r26	; 0x02
    1ad8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ada:	8e 01       	movw	r16, r28
    1adc:	00 59       	subi	r16, 0x90	; 144
    1ade:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae0:	fe 01       	movw	r30, r28
    1ae2:	ec 58       	subi	r30, 0x8C	; 140
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	60 81       	ld	r22, Z
    1ae8:	71 81       	ldd	r23, Z+1	; 0x01
    1aea:	82 81       	ldd	r24, Z+2	; 0x02
    1aec:	93 81       	ldd	r25, Z+3	; 0x03
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	4a e7       	ldi	r20, 0x7A	; 122
    1af4:	53 e4       	ldi	r21, 0x43	; 67
    1af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afa:	dc 01       	movw	r26, r24
    1afc:	cb 01       	movw	r24, r22
    1afe:	f8 01       	movw	r30, r16
    1b00:	80 83       	st	Z, r24
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	a2 83       	std	Z+2, r26	; 0x02
    1b06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e0 59       	subi	r30, 0x90	; 144
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e8       	ldi	r20, 0x80	; 128
    1b1c:	5f e3       	ldi	r21, 0x3F	; 63
    1b1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b22:	88 23       	and	r24, r24
    1b24:	44 f4       	brge	.+16     	; 0x1b36 <LCD_displayCharacter+0x154>
		__ticks = 1;
    1b26:	fe 01       	movw	r30, r28
    1b28:	e2 59       	subi	r30, 0x92	; 146
    1b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	91 83       	std	Z+1, r25	; 0x01
    1b32:	80 83       	st	Z, r24
    1b34:	64 c0       	rjmp	.+200    	; 0x1bfe <LCD_displayCharacter+0x21c>
	else if (__tmp > 65535)
    1b36:	fe 01       	movw	r30, r28
    1b38:	e0 59       	subi	r30, 0x90	; 144
    1b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3c:	60 81       	ld	r22, Z
    1b3e:	71 81       	ldd	r23, Z+1	; 0x01
    1b40:	82 81       	ldd	r24, Z+2	; 0x02
    1b42:	93 81       	ldd	r25, Z+3	; 0x03
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	3f ef       	ldi	r19, 0xFF	; 255
    1b48:	4f e7       	ldi	r20, 0x7F	; 127
    1b4a:	57 e4       	ldi	r21, 0x47	; 71
    1b4c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b50:	18 16       	cp	r1, r24
    1b52:	0c f0       	brlt	.+2      	; 0x1b56 <LCD_displayCharacter+0x174>
    1b54:	43 c0       	rjmp	.+134    	; 0x1bdc <LCD_displayCharacter+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b56:	fe 01       	movw	r30, r28
    1b58:	ec 58       	subi	r30, 0x8C	; 140
    1b5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5c:	60 81       	ld	r22, Z
    1b5e:	71 81       	ldd	r23, Z+1	; 0x01
    1b60:	82 81       	ldd	r24, Z+2	; 0x02
    1b62:	93 81       	ldd	r25, Z+3	; 0x03
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e2       	ldi	r20, 0x20	; 32
    1b6a:	51 e4       	ldi	r21, 0x41	; 65
    1b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	8e 01       	movw	r16, r28
    1b76:	02 59       	subi	r16, 0x92	; 146
    1b78:	1f 4f       	sbci	r17, 0xFF	; 255
    1b7a:	bc 01       	movw	r22, r24
    1b7c:	cd 01       	movw	r24, r26
    1b7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	f8 01       	movw	r30, r16
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	80 83       	st	Z, r24
    1b8c:	1f c0       	rjmp	.+62     	; 0x1bcc <LCD_displayCharacter+0x1ea>
    1b8e:	fe 01       	movw	r30, r28
    1b90:	e4 59       	subi	r30, 0x94	; 148
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	89 e1       	ldi	r24, 0x19	; 25
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	91 83       	std	Z+1, r25	; 0x01
    1b9a:	80 83       	st	Z, r24
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e4 59       	subi	r30, 0x94	; 148
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	80 81       	ld	r24, Z
    1ba4:	91 81       	ldd	r25, Z+1	; 0x01
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <LCD_displayCharacter+0x1c4>
    1baa:	fe 01       	movw	r30, r28
    1bac:	e4 59       	subi	r30, 0x94	; 148
    1bae:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb0:	91 83       	std	Z+1, r25	; 0x01
    1bb2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bb4:	de 01       	movw	r26, r28
    1bb6:	a2 59       	subi	r26, 0x92	; 146
    1bb8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bba:	fe 01       	movw	r30, r28
    1bbc:	e2 59       	subi	r30, 0x92	; 146
    1bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc0:	80 81       	ld	r24, Z
    1bc2:	91 81       	ldd	r25, Z+1	; 0x01
    1bc4:	01 97       	sbiw	r24, 0x01	; 1
    1bc6:	11 96       	adiw	r26, 0x01	; 1
    1bc8:	9c 93       	st	X, r25
    1bca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bcc:	fe 01       	movw	r30, r28
    1bce:	e2 59       	subi	r30, 0x92	; 146
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 81       	ld	r24, Z
    1bd4:	91 81       	ldd	r25, Z+1	; 0x01
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	d1 f6       	brne	.-76     	; 0x1b8e <LCD_displayCharacter+0x1ac>
    1bda:	4b c0       	rjmp	.+150    	; 0x1c72 <LCD_displayCharacter+0x290>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bdc:	8e 01       	movw	r16, r28
    1bde:	02 59       	subi	r16, 0x92	; 146
    1be0:	1f 4f       	sbci	r17, 0xFF	; 255
    1be2:	fe 01       	movw	r30, r28
    1be4:	e0 59       	subi	r30, 0x90	; 144
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	60 81       	ld	r22, Z
    1bea:	71 81       	ldd	r23, Z+1	; 0x01
    1bec:	82 81       	ldd	r24, Z+2	; 0x02
    1bee:	93 81       	ldd	r25, Z+3	; 0x03
    1bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	80 83       	st	Z, r24
    1bfe:	de 01       	movw	r26, r28
    1c00:	a6 59       	subi	r26, 0x96	; 150
    1c02:	bf 4f       	sbci	r27, 0xFF	; 255
    1c04:	fe 01       	movw	r30, r28
    1c06:	e2 59       	subi	r30, 0x92	; 146
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	80 81       	ld	r24, Z
    1c0c:	91 81       	ldd	r25, Z+1	; 0x01
    1c0e:	11 96       	adiw	r26, 0x01	; 1
    1c10:	9c 93       	st	X, r25
    1c12:	8e 93       	st	-X, r24
    1c14:	fe 01       	movw	r30, r28
    1c16:	e6 59       	subi	r30, 0x96	; 150
    1c18:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1a:	80 81       	ld	r24, Z
    1c1c:	91 81       	ldd	r25, Z+1	; 0x01
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_displayCharacter+0x23c>
    1c22:	fe 01       	movw	r30, r28
    1c24:	e6 59       	subi	r30, 0x96	; 150
    1c26:	ff 4f       	sbci	r31, 0xFF	; 255
    1c28:	91 83       	std	Z+1, r25	; 0x01
    1c2a:	80 83       	st	Z, r24
    1c2c:	22 c0       	rjmp	.+68     	; 0x1c72 <LCD_displayCharacter+0x290>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c2e:	8e 01       	movw	r16, r28
    1c30:	08 58       	subi	r16, 0x88	; 136
    1c32:	1f 4f       	sbci	r17, 0xFF	; 255
    1c34:	fe 01       	movw	r30, r28
    1c36:	e7 58       	subi	r30, 0x87	; 135
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	60 81       	ld	r22, Z
    1c3c:	71 81       	ldd	r23, Z+1	; 0x01
    1c3e:	82 81       	ldd	r24, Z+2	; 0x02
    1c40:	93 81       	ldd	r25, Z+3	; 0x03
    1c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	f8 01       	movw	r30, r16
    1c4c:	80 83       	st	Z, r24
    1c4e:	de 01       	movw	r26, r28
    1c50:	a7 59       	subi	r26, 0x97	; 151
    1c52:	bf 4f       	sbci	r27, 0xFF	; 255
    1c54:	fe 01       	movw	r30, r28
    1c56:	e8 58       	subi	r30, 0x88	; 136
    1c58:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5a:	80 81       	ld	r24, Z
    1c5c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c5e:	fe 01       	movw	r30, r28
    1c60:	e7 59       	subi	r30, 0x97	; 151
    1c62:	ff 4f       	sbci	r31, 0xFF	; 255
    1c64:	80 81       	ld	r24, Z
    1c66:	8a 95       	dec	r24
    1c68:	f1 f7       	brne	.-4      	; 0x1c66 <LCD_displayCharacter+0x284>
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	e7 59       	subi	r30, 0x97	; 151
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	80 83       	st	Z, r24
	_delay_us(1);
	SET_BIT(LCD_CTRL_PORT,E);
    1c72:	a8 e3       	ldi	r26, 0x38	; 56
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e8 e3       	ldi	r30, 0x38	; 56
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	88 60       	ori	r24, 0x08	; 8
    1c7e:	8c 93       	st	X, r24
    1c80:	fe 01       	movw	r30, r28
    1c82:	eb 59       	subi	r30, 0x9B	; 155
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	a0 e8       	ldi	r26, 0x80	; 128
    1c8c:	bf e3       	ldi	r27, 0x3F	; 63
    1c8e:	80 83       	st	Z, r24
    1c90:	91 83       	std	Z+1, r25	; 0x01
    1c92:	a2 83       	std	Z+2, r26	; 0x02
    1c94:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c96:	8e 01       	movw	r16, r28
    1c98:	0f 59       	subi	r16, 0x9F	; 159
    1c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9c:	fe 01       	movw	r30, r28
    1c9e:	eb 59       	subi	r30, 0x9B	; 155
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	60 81       	ld	r22, Z
    1ca4:	71 81       	ldd	r23, Z+1	; 0x01
    1ca6:	82 81       	ldd	r24, Z+2	; 0x02
    1ca8:	93 81       	ldd	r25, Z+3	; 0x03
    1caa:	2b ea       	ldi	r18, 0xAB	; 171
    1cac:	3a ea       	ldi	r19, 0xAA	; 170
    1cae:	4a ea       	ldi	r20, 0xAA	; 170
    1cb0:	5e e3       	ldi	r21, 0x3E	; 62
    1cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	f8 01       	movw	r30, r16
    1cbc:	80 83       	st	Z, r24
    1cbe:	91 83       	std	Z+1, r25	; 0x01
    1cc0:	a2 83       	std	Z+2, r26	; 0x02
    1cc2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	ef 59       	subi	r30, 0x9F	; 159
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	60 81       	ld	r22, Z
    1ccc:	71 81       	ldd	r23, Z+1	; 0x01
    1cce:	82 81       	ldd	r24, Z+2	; 0x02
    1cd0:	93 81       	ldd	r25, Z+3	; 0x03
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e8       	ldi	r20, 0x80	; 128
    1cd8:	5f e3       	ldi	r21, 0x3F	; 63
    1cda:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cde:	88 23       	and	r24, r24
    1ce0:	34 f4       	brge	.+12     	; 0x1cee <LCD_displayCharacter+0x30c>
		__ticks = 1;
    1ce2:	fe 01       	movw	r30, r28
    1ce4:	e0 5a       	subi	r30, 0xA0	; 160
    1ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	80 83       	st	Z, r24
    1cec:	e0 c0       	rjmp	.+448    	; 0x1eae <LCD_displayCharacter+0x4cc>
	else if (__tmp > 255)
    1cee:	fe 01       	movw	r30, r28
    1cf0:	ef 59       	subi	r30, 0x9F	; 159
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	60 81       	ld	r22, Z
    1cf6:	71 81       	ldd	r23, Z+1	; 0x01
    1cf8:	82 81       	ldd	r24, Z+2	; 0x02
    1cfa:	93 81       	ldd	r25, Z+3	; 0x03
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	4f e7       	ldi	r20, 0x7F	; 127
    1d02:	53 e4       	ldi	r21, 0x43	; 67
    1d04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d08:	18 16       	cp	r1, r24
    1d0a:	0c f0       	brlt	.+2      	; 0x1d0e <LCD_displayCharacter+0x32c>
    1d0c:	c0 c0       	rjmp	.+384    	; 0x1e8e <LCD_displayCharacter+0x4ac>
	{
		_delay_ms(__us / 1000.0);
    1d0e:	fe 01       	movw	r30, r28
    1d10:	eb 59       	subi	r30, 0x9B	; 155
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	60 81       	ld	r22, Z
    1d16:	71 81       	ldd	r23, Z+1	; 0x01
    1d18:	82 81       	ldd	r24, Z+2	; 0x02
    1d1a:	93 81       	ldd	r25, Z+3	; 0x03
    1d1c:	20 e0       	ldi	r18, 0x00	; 0
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	4a e7       	ldi	r20, 0x7A	; 122
    1d22:	54 e4       	ldi	r21, 0x44	; 68
    1d24:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d28:	dc 01       	movw	r26, r24
    1d2a:	cb 01       	movw	r24, r22
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e4 5a       	subi	r30, 0xA4	; 164
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	80 83       	st	Z, r24
    1d34:	91 83       	std	Z+1, r25	; 0x01
    1d36:	a2 83       	std	Z+2, r26	; 0x02
    1d38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3a:	8e 01       	movw	r16, r28
    1d3c:	08 5a       	subi	r16, 0xA8	; 168
    1d3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d40:	fe 01       	movw	r30, r28
    1d42:	e4 5a       	subi	r30, 0xA4	; 164
    1d44:	ff 4f       	sbci	r31, 0xFF	; 255
    1d46:	60 81       	ld	r22, Z
    1d48:	71 81       	ldd	r23, Z+1	; 0x01
    1d4a:	82 81       	ldd	r24, Z+2	; 0x02
    1d4c:	93 81       	ldd	r25, Z+3	; 0x03
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	4a e7       	ldi	r20, 0x7A	; 122
    1d54:	53 e4       	ldi	r21, 0x43	; 67
    1d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
    1d5e:	f8 01       	movw	r30, r16
    1d60:	80 83       	st	Z, r24
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	a2 83       	std	Z+2, r26	; 0x02
    1d66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d68:	fe 01       	movw	r30, r28
    1d6a:	e8 5a       	subi	r30, 0xA8	; 168
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	60 81       	ld	r22, Z
    1d70:	71 81       	ldd	r23, Z+1	; 0x01
    1d72:	82 81       	ldd	r24, Z+2	; 0x02
    1d74:	93 81       	ldd	r25, Z+3	; 0x03
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e8       	ldi	r20, 0x80	; 128
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	44 f4       	brge	.+16     	; 0x1d96 <LCD_displayCharacter+0x3b4>
		__ticks = 1;
    1d86:	fe 01       	movw	r30, r28
    1d88:	ea 5a       	subi	r30, 0xAA	; 170
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	91 83       	std	Z+1, r25	; 0x01
    1d92:	80 83       	st	Z, r24
    1d94:	64 c0       	rjmp	.+200    	; 0x1e5e <LCD_displayCharacter+0x47c>
	else if (__tmp > 65535)
    1d96:	fe 01       	movw	r30, r28
    1d98:	e8 5a       	subi	r30, 0xA8	; 168
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	60 81       	ld	r22, Z
    1d9e:	71 81       	ldd	r23, Z+1	; 0x01
    1da0:	82 81       	ldd	r24, Z+2	; 0x02
    1da2:	93 81       	ldd	r25, Z+3	; 0x03
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	3f ef       	ldi	r19, 0xFF	; 255
    1da8:	4f e7       	ldi	r20, 0x7F	; 127
    1daa:	57 e4       	ldi	r21, 0x47	; 71
    1dac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1db0:	18 16       	cp	r1, r24
    1db2:	0c f0       	brlt	.+2      	; 0x1db6 <LCD_displayCharacter+0x3d4>
    1db4:	43 c0       	rjmp	.+134    	; 0x1e3c <LCD_displayCharacter+0x45a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db6:	fe 01       	movw	r30, r28
    1db8:	e4 5a       	subi	r30, 0xA4	; 164
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	60 81       	ld	r22, Z
    1dbe:	71 81       	ldd	r23, Z+1	; 0x01
    1dc0:	82 81       	ldd	r24, Z+2	; 0x02
    1dc2:	93 81       	ldd	r25, Z+3	; 0x03
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	40 e2       	ldi	r20, 0x20	; 32
    1dca:	51 e4       	ldi	r21, 0x41	; 65
    1dcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd0:	dc 01       	movw	r26, r24
    1dd2:	cb 01       	movw	r24, r22
    1dd4:	8e 01       	movw	r16, r28
    1dd6:	0a 5a       	subi	r16, 0xAA	; 170
    1dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dda:	bc 01       	movw	r22, r24
    1ddc:	cd 01       	movw	r24, r26
    1dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	f8 01       	movw	r30, r16
    1de8:	91 83       	std	Z+1, r25	; 0x01
    1dea:	80 83       	st	Z, r24
    1dec:	1f c0       	rjmp	.+62     	; 0x1e2c <LCD_displayCharacter+0x44a>
    1dee:	fe 01       	movw	r30, r28
    1df0:	ec 5a       	subi	r30, 0xAC	; 172
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	89 e1       	ldi	r24, 0x19	; 25
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	91 83       	std	Z+1, r25	; 0x01
    1dfa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dfc:	fe 01       	movw	r30, r28
    1dfe:	ec 5a       	subi	r30, 0xAC	; 172
    1e00:	ff 4f       	sbci	r31, 0xFF	; 255
    1e02:	80 81       	ld	r24, Z
    1e04:	91 81       	ldd	r25, Z+1	; 0x01
    1e06:	01 97       	sbiw	r24, 0x01	; 1
    1e08:	f1 f7       	brne	.-4      	; 0x1e06 <LCD_displayCharacter+0x424>
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	ec 5a       	subi	r30, 0xAC	; 172
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	91 83       	std	Z+1, r25	; 0x01
    1e12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e14:	de 01       	movw	r26, r28
    1e16:	aa 5a       	subi	r26, 0xAA	; 170
    1e18:	bf 4f       	sbci	r27, 0xFF	; 255
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	ea 5a       	subi	r30, 0xAA	; 170
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 81       	ld	r24, Z
    1e22:	91 81       	ldd	r25, Z+1	; 0x01
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	11 96       	adiw	r26, 0x01	; 1
    1e28:	9c 93       	st	X, r25
    1e2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	ea 5a       	subi	r30, 0xAA	; 170
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	80 81       	ld	r24, Z
    1e34:	91 81       	ldd	r25, Z+1	; 0x01
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	d1 f6       	brne	.-76     	; 0x1dee <LCD_displayCharacter+0x40c>
    1e3a:	4b c0       	rjmp	.+150    	; 0x1ed2 <LCD_displayCharacter+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3c:	8e 01       	movw	r16, r28
    1e3e:	0a 5a       	subi	r16, 0xAA	; 170
    1e40:	1f 4f       	sbci	r17, 0xFF	; 255
    1e42:	fe 01       	movw	r30, r28
    1e44:	e8 5a       	subi	r30, 0xA8	; 168
    1e46:	ff 4f       	sbci	r31, 0xFF	; 255
    1e48:	60 81       	ld	r22, Z
    1e4a:	71 81       	ldd	r23, Z+1	; 0x01
    1e4c:	82 81       	ldd	r24, Z+2	; 0x02
    1e4e:	93 81       	ldd	r25, Z+3	; 0x03
    1e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	f8 01       	movw	r30, r16
    1e5a:	91 83       	std	Z+1, r25	; 0x01
    1e5c:	80 83       	st	Z, r24
    1e5e:	de 01       	movw	r26, r28
    1e60:	ae 5a       	subi	r26, 0xAE	; 174
    1e62:	bf 4f       	sbci	r27, 0xFF	; 255
    1e64:	fe 01       	movw	r30, r28
    1e66:	ea 5a       	subi	r30, 0xAA	; 170
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
    1e6e:	11 96       	adiw	r26, 0x01	; 1
    1e70:	9c 93       	st	X, r25
    1e72:	8e 93       	st	-X, r24
    1e74:	fe 01       	movw	r30, r28
    1e76:	ee 5a       	subi	r30, 0xAE	; 174
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	01 97       	sbiw	r24, 0x01	; 1
    1e80:	f1 f7       	brne	.-4      	; 0x1e7e <LCD_displayCharacter+0x49c>
    1e82:	fe 01       	movw	r30, r28
    1e84:	ee 5a       	subi	r30, 0xAE	; 174
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	91 83       	std	Z+1, r25	; 0x01
    1e8a:	80 83       	st	Z, r24
    1e8c:	22 c0       	rjmp	.+68     	; 0x1ed2 <LCD_displayCharacter+0x4f0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e8e:	8e 01       	movw	r16, r28
    1e90:	00 5a       	subi	r16, 0xA0	; 160
    1e92:	1f 4f       	sbci	r17, 0xFF	; 255
    1e94:	fe 01       	movw	r30, r28
    1e96:	ef 59       	subi	r30, 0x9F	; 159
    1e98:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9a:	60 81       	ld	r22, Z
    1e9c:	71 81       	ldd	r23, Z+1	; 0x01
    1e9e:	82 81       	ldd	r24, Z+2	; 0x02
    1ea0:	93 81       	ldd	r25, Z+3	; 0x03
    1ea2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea6:	dc 01       	movw	r26, r24
    1ea8:	cb 01       	movw	r24, r22
    1eaa:	f8 01       	movw	r30, r16
    1eac:	80 83       	st	Z, r24
    1eae:	de 01       	movw	r26, r28
    1eb0:	af 5a       	subi	r26, 0xAF	; 175
    1eb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e0 5a       	subi	r30, 0xA0	; 160
    1eb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eba:	80 81       	ld	r24, Z
    1ebc:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ebe:	fe 01       	movw	r30, r28
    1ec0:	ef 5a       	subi	r30, 0xAF	; 175
    1ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec4:	80 81       	ld	r24, Z
    1ec6:	8a 95       	dec	r24
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <LCD_displayCharacter+0x4e4>
    1eca:	fe 01       	movw	r30, r28
    1ecc:	ef 5a       	subi	r30, 0xAF	; 175
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 83       	st	Z, r24
	_delay_us(1);
	#if(DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (a_character & 0xF0);
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((a_character & 0xF0) >>4);
    1ed2:	a2 e3       	ldi	r26, 0x32	; 50
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e2 e3       	ldi	r30, 0x32	; 50
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	98 2f       	mov	r25, r24
    1ede:	90 7f       	andi	r25, 0xF0	; 240
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	ef 57       	subi	r30, 0x7F	; 127
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	80 81       	ld	r24, Z
    1ee8:	82 95       	swap	r24
    1eea:	8f 70       	andi	r24, 0x0F	; 15
    1eec:	89 2b       	or	r24, r25
    1eee:	8c 93       	st	X, r24
    1ef0:	fe 01       	movw	r30, r28
    1ef2:	e3 5b       	subi	r30, 0xB3	; 179
    1ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	a0 e8       	ldi	r26, 0x80	; 128
    1efc:	bf e3       	ldi	r27, 0x3F	; 63
    1efe:	80 83       	st	Z, r24
    1f00:	91 83       	std	Z+1, r25	; 0x01
    1f02:	a2 83       	std	Z+2, r26	; 0x02
    1f04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f06:	8e 01       	movw	r16, r28
    1f08:	07 5b       	subi	r16, 0xB7	; 183
    1f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	e3 5b       	subi	r30, 0xB3	; 179
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	4a e7       	ldi	r20, 0x7A	; 122
    1f20:	53 e4       	ldi	r21, 0x43	; 67
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	f8 01       	movw	r30, r16
    1f2c:	80 83       	st	Z, r24
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	a2 83       	std	Z+2, r26	; 0x02
    1f32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f34:	fe 01       	movw	r30, r28
    1f36:	e7 5b       	subi	r30, 0xB7	; 183
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	60 81       	ld	r22, Z
    1f3c:	71 81       	ldd	r23, Z+1	; 0x01
    1f3e:	82 81       	ldd	r24, Z+2	; 0x02
    1f40:	93 81       	ldd	r25, Z+3	; 0x03
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e8       	ldi	r20, 0x80	; 128
    1f48:	5f e3       	ldi	r21, 0x3F	; 63
    1f4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f4e:	88 23       	and	r24, r24
    1f50:	44 f4       	brge	.+16     	; 0x1f62 <LCD_displayCharacter+0x580>
		__ticks = 1;
    1f52:	fe 01       	movw	r30, r28
    1f54:	e9 5b       	subi	r30, 0xB9	; 185
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	80 83       	st	Z, r24
    1f60:	64 c0       	rjmp	.+200    	; 0x202a <LCD_displayCharacter+0x648>
	else if (__tmp > 65535)
    1f62:	fe 01       	movw	r30, r28
    1f64:	e7 5b       	subi	r30, 0xB7	; 183
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	60 81       	ld	r22, Z
    1f6a:	71 81       	ldd	r23, Z+1	; 0x01
    1f6c:	82 81       	ldd	r24, Z+2	; 0x02
    1f6e:	93 81       	ldd	r25, Z+3	; 0x03
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	3f ef       	ldi	r19, 0xFF	; 255
    1f74:	4f e7       	ldi	r20, 0x7F	; 127
    1f76:	57 e4       	ldi	r21, 0x47	; 71
    1f78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f7c:	18 16       	cp	r1, r24
    1f7e:	0c f0       	brlt	.+2      	; 0x1f82 <LCD_displayCharacter+0x5a0>
    1f80:	43 c0       	rjmp	.+134    	; 0x2008 <LCD_displayCharacter+0x626>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f82:	fe 01       	movw	r30, r28
    1f84:	e3 5b       	subi	r30, 0xB3	; 179
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e2       	ldi	r20, 0x20	; 32
    1f96:	51 e4       	ldi	r21, 0x41	; 65
    1f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	8e 01       	movw	r16, r28
    1fa2:	09 5b       	subi	r16, 0xB9	; 185
    1fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	cd 01       	movw	r24, r26
    1faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	91 83       	std	Z+1, r25	; 0x01
    1fb6:	80 83       	st	Z, r24
    1fb8:	1f c0       	rjmp	.+62     	; 0x1ff8 <LCD_displayCharacter+0x616>
    1fba:	fe 01       	movw	r30, r28
    1fbc:	eb 5b       	subi	r30, 0xBB	; 187
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	89 e1       	ldi	r24, 0x19	; 25
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fc8:	fe 01       	movw	r30, r28
    1fca:	eb 5b       	subi	r30, 0xBB	; 187
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	80 81       	ld	r24, Z
    1fd0:	91 81       	ldd	r25, Z+1	; 0x01
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <LCD_displayCharacter+0x5f0>
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	eb 5b       	subi	r30, 0xBB	; 187
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe0:	de 01       	movw	r26, r28
    1fe2:	a9 5b       	subi	r26, 0xB9	; 185
    1fe4:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	e9 5b       	subi	r30, 0xB9	; 185
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	80 81       	ld	r24, Z
    1fee:	91 81       	ldd	r25, Z+1	; 0x01
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	11 96       	adiw	r26, 0x01	; 1
    1ff4:	9c 93       	st	X, r25
    1ff6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	e9 5b       	subi	r30, 0xB9	; 185
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	80 81       	ld	r24, Z
    2000:	91 81       	ldd	r25, Z+1	; 0x01
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	d1 f6       	brne	.-76     	; 0x1fba <LCD_displayCharacter+0x5d8>
    2006:	27 c0       	rjmp	.+78     	; 0x2056 <LCD_displayCharacter+0x674>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	8e 01       	movw	r16, r28
    200a:	09 5b       	subi	r16, 0xB9	; 185
    200c:	1f 4f       	sbci	r17, 0xFF	; 255
    200e:	fe 01       	movw	r30, r28
    2010:	e7 5b       	subi	r30, 0xB7	; 183
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	60 81       	ld	r22, Z
    2016:	71 81       	ldd	r23, Z+1	; 0x01
    2018:	82 81       	ldd	r24, Z+2	; 0x02
    201a:	93 81       	ldd	r25, Z+3	; 0x03
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	f8 01       	movw	r30, r16
    2026:	91 83       	std	Z+1, r25	; 0x01
    2028:	80 83       	st	Z, r24
    202a:	de 01       	movw	r26, r28
    202c:	ad 5b       	subi	r26, 0xBD	; 189
    202e:	bf 4f       	sbci	r27, 0xFF	; 255
    2030:	fe 01       	movw	r30, r28
    2032:	e9 5b       	subi	r30, 0xB9	; 185
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	80 81       	ld	r24, Z
    2038:	91 81       	ldd	r25, Z+1	; 0x01
    203a:	8d 93       	st	X+, r24
    203c:	9c 93       	st	X, r25
    203e:	fe 01       	movw	r30, r28
    2040:	ed 5b       	subi	r30, 0xBD	; 189
    2042:	ff 4f       	sbci	r31, 0xFF	; 255
    2044:	80 81       	ld	r24, Z
    2046:	91 81       	ldd	r25, Z+1	; 0x01
    2048:	01 97       	sbiw	r24, 0x01	; 1
    204a:	f1 f7       	brne	.-4      	; 0x2048 <LCD_displayCharacter+0x666>
    204c:	fe 01       	movw	r30, r28
    204e:	ed 5b       	subi	r30, 0xBD	; 189
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	91 83       	std	Z+1, r25	; 0x01
    2054:	80 83       	st	Z, r24
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT,E);
    2056:	a8 e3       	ldi	r26, 0x38	; 56
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e8 e3       	ldi	r30, 0x38	; 56
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	87 7f       	andi	r24, 0xF7	; 247
    2062:	8c 93       	st	X, r24
    2064:	fe 01       	movw	r30, r28
    2066:	ff 96       	adiw	r30, 0x3f	; 63
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	a0 e8       	ldi	r26, 0x80	; 128
    206e:	bf e3       	ldi	r27, 0x3F	; 63
    2070:	80 83       	st	Z, r24
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	a2 83       	std	Z+2, r26	; 0x02
    2076:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2078:	fe 01       	movw	r30, r28
    207a:	ff 96       	adiw	r30, 0x3f	; 63
    207c:	60 81       	ld	r22, Z
    207e:	71 81       	ldd	r23, Z+1	; 0x01
    2080:	82 81       	ldd	r24, Z+2	; 0x02
    2082:	93 81       	ldd	r25, Z+3	; 0x03
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a e7       	ldi	r20, 0x7A	; 122
    208a:	53 e4       	ldi	r21, 0x43	; 67
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8b af       	std	Y+59, r24	; 0x3b
    2096:	9c af       	std	Y+60, r25	; 0x3c
    2098:	ad af       	std	Y+61, r26	; 0x3d
    209a:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    209c:	6b ad       	ldd	r22, Y+59	; 0x3b
    209e:	7c ad       	ldd	r23, Y+60	; 0x3c
    20a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    20a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <LCD_displayCharacter+0x6dc>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9a af       	std	Y+58, r25	; 0x3a
    20ba:	89 af       	std	Y+57, r24	; 0x39
    20bc:	41 c0       	rjmp	.+130    	; 0x2140 <LCD_displayCharacter+0x75e>
	else if (__tmp > 65535)
    20be:	6b ad       	ldd	r22, Y+59	; 0x3b
    20c0:	7c ad       	ldd	r23, Y+60	; 0x3c
    20c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    20c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	5c f5       	brge	.+86     	; 0x212c <LCD_displayCharacter+0x74a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	fe 01       	movw	r30, r28
    20d8:	ff 96       	adiw	r30, 0x3f	; 63
    20da:	60 81       	ld	r22, Z
    20dc:	71 81       	ldd	r23, Z+1	; 0x01
    20de:	82 81       	ldd	r24, Z+2	; 0x02
    20e0:	93 81       	ldd	r25, Z+3	; 0x03
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	40 e2       	ldi	r20, 0x20	; 32
    20e8:	51 e4       	ldi	r21, 0x41	; 65
    20ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	9a af       	std	Y+58, r25	; 0x3a
    2100:	89 af       	std	Y+57, r24	; 0x39
    2102:	0f c0       	rjmp	.+30     	; 0x2122 <LCD_displayCharacter+0x740>
    2104:	89 e1       	ldi	r24, 0x19	; 25
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	98 af       	std	Y+56, r25	; 0x38
    210a:	8f ab       	std	Y+55, r24	; 0x37
    210c:	8f a9       	ldd	r24, Y+55	; 0x37
    210e:	98 ad       	ldd	r25, Y+56	; 0x38
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <LCD_displayCharacter+0x72e>
    2114:	98 af       	std	Y+56, r25	; 0x38
    2116:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2118:	89 ad       	ldd	r24, Y+57	; 0x39
    211a:	9a ad       	ldd	r25, Y+58	; 0x3a
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	9a af       	std	Y+58, r25	; 0x3a
    2120:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2122:	89 ad       	ldd	r24, Y+57	; 0x39
    2124:	9a ad       	ldd	r25, Y+58	; 0x3a
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	69 f7       	brne	.-38     	; 0x2104 <LCD_displayCharacter+0x722>
    212a:	14 c0       	rjmp	.+40     	; 0x2154 <LCD_displayCharacter+0x772>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212c:	6b ad       	ldd	r22, Y+59	; 0x3b
    212e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2130:	8d ad       	ldd	r24, Y+61	; 0x3d
    2132:	9e ad       	ldd	r25, Y+62	; 0x3e
    2134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	9a af       	std	Y+58, r25	; 0x3a
    213e:	89 af       	std	Y+57, r24	; 0x39
    2140:	89 ad       	ldd	r24, Y+57	; 0x39
    2142:	9a ad       	ldd	r25, Y+58	; 0x3a
    2144:	9e ab       	std	Y+54, r25	; 0x36
    2146:	8d ab       	std	Y+53, r24	; 0x35
    2148:	8d a9       	ldd	r24, Y+53	; 0x35
    214a:	9e a9       	ldd	r25, Y+54	; 0x36
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <LCD_displayCharacter+0x76a>
    2150:	9e ab       	std	Y+54, r25	; 0x36
    2152:	8d ab       	std	Y+53, r24	; 0x35
		_delay_ms(1);
		SET_BIT(LCD_CTRL_PORT,E);
    2154:	a8 e3       	ldi	r26, 0x38	; 56
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	e8 e3       	ldi	r30, 0x38	; 56
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	88 60       	ori	r24, 0x08	; 8
    2160:	8c 93       	st	X, r24
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	a0 e8       	ldi	r26, 0x80	; 128
    2168:	bf e3       	ldi	r27, 0x3F	; 63
    216a:	89 ab       	std	Y+49, r24	; 0x31
    216c:	9a ab       	std	Y+50, r25	; 0x32
    216e:	ab ab       	std	Y+51, r26	; 0x33
    2170:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2172:	69 a9       	ldd	r22, Y+49	; 0x31
    2174:	7a a9       	ldd	r23, Y+50	; 0x32
    2176:	8b a9       	ldd	r24, Y+51	; 0x33
    2178:	9c a9       	ldd	r25, Y+52	; 0x34
    217a:	2b ea       	ldi	r18, 0xAB	; 171
    217c:	3a ea       	ldi	r19, 0xAA	; 170
    217e:	4a ea       	ldi	r20, 0xAA	; 170
    2180:	5e e3       	ldi	r21, 0x3E	; 62
    2182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	8d a7       	std	Y+45, r24	; 0x2d
    218c:	9e a7       	std	Y+46, r25	; 0x2e
    218e:	af a7       	std	Y+47, r26	; 0x2f
    2190:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2192:	6d a5       	ldd	r22, Y+45	; 0x2d
    2194:	7e a5       	ldd	r23, Y+46	; 0x2e
    2196:	8f a5       	ldd	r24, Y+47	; 0x2f
    2198:	98 a9       	ldd	r25, Y+48	; 0x30
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	40 e8       	ldi	r20, 0x80	; 128
    21a0:	5f e3       	ldi	r21, 0x3F	; 63
    21a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21a6:	88 23       	and	r24, r24
    21a8:	1c f4       	brge	.+6      	; 0x21b0 <LCD_displayCharacter+0x7ce>
		__ticks = 1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	8c a7       	std	Y+44, r24	; 0x2c
    21ae:	91 c0       	rjmp	.+290    	; 0x22d2 <LCD_displayCharacter+0x8f0>
	else if (__tmp > 255)
    21b0:	6d a5       	ldd	r22, Y+45	; 0x2d
    21b2:	7e a5       	ldd	r23, Y+46	; 0x2e
    21b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    21b6:	98 a9       	ldd	r25, Y+48	; 0x30
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	53 e4       	ldi	r21, 0x43	; 67
    21c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21c4:	18 16       	cp	r1, r24
    21c6:	0c f0       	brlt	.+2      	; 0x21ca <LCD_displayCharacter+0x7e8>
    21c8:	7b c0       	rjmp	.+246    	; 0x22c0 <LCD_displayCharacter+0x8de>
	{
		_delay_ms(__us / 1000.0);
    21ca:	69 a9       	ldd	r22, Y+49	; 0x31
    21cc:	7a a9       	ldd	r23, Y+50	; 0x32
    21ce:	8b a9       	ldd	r24, Y+51	; 0x33
    21d0:	9c a9       	ldd	r25, Y+52	; 0x34
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	4a e7       	ldi	r20, 0x7A	; 122
    21d8:	54 e4       	ldi	r21, 0x44	; 68
    21da:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	88 a7       	std	Y+40, r24	; 0x28
    21e4:	99 a7       	std	Y+41, r25	; 0x29
    21e6:	aa a7       	std	Y+42, r26	; 0x2a
    21e8:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ea:	68 a5       	ldd	r22, Y+40	; 0x28
    21ec:	79 a5       	ldd	r23, Y+41	; 0x29
    21ee:	8a a5       	ldd	r24, Y+42	; 0x2a
    21f0:	9b a5       	ldd	r25, Y+43	; 0x2b
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	4a e7       	ldi	r20, 0x7A	; 122
    21f8:	53 e4       	ldi	r21, 0x43	; 67
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	8c a3       	std	Y+36, r24	; 0x24
    2204:	9d a3       	std	Y+37, r25	; 0x25
    2206:	ae a3       	std	Y+38, r26	; 0x26
    2208:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    220a:	6c a1       	ldd	r22, Y+36	; 0x24
    220c:	7d a1       	ldd	r23, Y+37	; 0x25
    220e:	8e a1       	ldd	r24, Y+38	; 0x26
    2210:	9f a1       	ldd	r25, Y+39	; 0x27
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    221e:	88 23       	and	r24, r24
    2220:	2c f4       	brge	.+10     	; 0x222c <LCD_displayCharacter+0x84a>
		__ticks = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9b a3       	std	Y+35, r25	; 0x23
    2228:	8a a3       	std	Y+34, r24	; 0x22
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <LCD_displayCharacter+0x8c8>
	else if (__tmp > 65535)
    222c:	6c a1       	ldd	r22, Y+36	; 0x24
    222e:	7d a1       	ldd	r23, Y+37	; 0x25
    2230:	8e a1       	ldd	r24, Y+38	; 0x26
    2232:	9f a1       	ldd	r25, Y+39	; 0x27
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	4c f5       	brge	.+82     	; 0x2296 <LCD_displayCharacter+0x8b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2244:	68 a5       	ldd	r22, Y+40	; 0x28
    2246:	79 a5       	ldd	r23, Y+41	; 0x29
    2248:	8a a5       	ldd	r24, Y+42	; 0x2a
    224a:	9b a5       	ldd	r25, Y+43	; 0x2b
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9b a3       	std	Y+35, r25	; 0x23
    226a:	8a a3       	std	Y+34, r24	; 0x22
    226c:	0f c0       	rjmp	.+30     	; 0x228c <LCD_displayCharacter+0x8aa>
    226e:	89 e1       	ldi	r24, 0x19	; 25
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	99 a3       	std	Y+33, r25	; 0x21
    2274:	88 a3       	std	Y+32, r24	; 0x20
    2276:	88 a1       	ldd	r24, Y+32	; 0x20
    2278:	99 a1       	ldd	r25, Y+33	; 0x21
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <LCD_displayCharacter+0x898>
    227e:	99 a3       	std	Y+33, r25	; 0x21
    2280:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2282:	8a a1       	ldd	r24, Y+34	; 0x22
    2284:	9b a1       	ldd	r25, Y+35	; 0x23
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	9b a3       	std	Y+35, r25	; 0x23
    228a:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	8a a1       	ldd	r24, Y+34	; 0x22
    228e:	9b a1       	ldd	r25, Y+35	; 0x23
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	69 f7       	brne	.-38     	; 0x226e <LCD_displayCharacter+0x88c>
    2294:	24 c0       	rjmp	.+72     	; 0x22de <LCD_displayCharacter+0x8fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2296:	6c a1       	ldd	r22, Y+36	; 0x24
    2298:	7d a1       	ldd	r23, Y+37	; 0x25
    229a:	8e a1       	ldd	r24, Y+38	; 0x26
    229c:	9f a1       	ldd	r25, Y+39	; 0x27
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9b a3       	std	Y+35, r25	; 0x23
    22a8:	8a a3       	std	Y+34, r24	; 0x22
    22aa:	8a a1       	ldd	r24, Y+34	; 0x22
    22ac:	9b a1       	ldd	r25, Y+35	; 0x23
    22ae:	9f 8f       	std	Y+31, r25	; 0x1f
    22b0:	8e 8f       	std	Y+30, r24	; 0x1e
    22b2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    22b4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <LCD_displayCharacter+0x8d4>
    22ba:	9f 8f       	std	Y+31, r25	; 0x1f
    22bc:	8e 8f       	std	Y+30, r24	; 0x1e
    22be:	0f c0       	rjmp	.+30     	; 0x22de <LCD_displayCharacter+0x8fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    22c0:	6d a5       	ldd	r22, Y+45	; 0x2d
    22c2:	7e a5       	ldd	r23, Y+46	; 0x2e
    22c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c6:	98 a9       	ldd	r25, Y+48	; 0x30
    22c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	8c a7       	std	Y+44, r24	; 0x2c
    22d2:	8c a5       	ldd	r24, Y+44	; 0x2c
    22d4:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    22d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22d8:	8a 95       	dec	r24
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <LCD_displayCharacter+0x8f6>
    22dc:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_us(1);
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((a_character & 0x0F) << 4);
		#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (a_character & 0x0F);
    22de:	a2 e3       	ldi	r26, 0x32	; 50
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	e2 e3       	ldi	r30, 0x32	; 50
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	98 2f       	mov	r25, r24
    22ea:	90 7f       	andi	r25, 0xF0	; 240
    22ec:	fe 01       	movw	r30, r28
    22ee:	ef 57       	subi	r30, 0x7F	; 127
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 81       	ld	r24, Z
    22f4:	8f 70       	andi	r24, 0x0F	; 15
    22f6:	89 2b       	or	r24, r25
    22f8:	8c 93       	st	X, r24
    22fa:	80 e0       	ldi	r24, 0x00	; 0
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a0 e8       	ldi	r26, 0x80	; 128
    2300:	bf e3       	ldi	r27, 0x3F	; 63
    2302:	89 8f       	std	Y+25, r24	; 0x19
    2304:	9a 8f       	std	Y+26, r25	; 0x1a
    2306:	ab 8f       	std	Y+27, r26	; 0x1b
    2308:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230a:	69 8d       	ldd	r22, Y+25	; 0x19
    230c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    230e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2310:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	4a e7       	ldi	r20, 0x7A	; 122
    2318:	53 e4       	ldi	r21, 0x43	; 67
    231a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	8d 8b       	std	Y+21, r24	; 0x15
    2324:	9e 8b       	std	Y+22, r25	; 0x16
    2326:	af 8b       	std	Y+23, r26	; 0x17
    2328:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    232a:	6d 89       	ldd	r22, Y+21	; 0x15
    232c:	7e 89       	ldd	r23, Y+22	; 0x16
    232e:	8f 89       	ldd	r24, Y+23	; 0x17
    2330:	98 8d       	ldd	r25, Y+24	; 0x18
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	30 e0       	ldi	r19, 0x00	; 0
    2336:	40 e8       	ldi	r20, 0x80	; 128
    2338:	5f e3       	ldi	r21, 0x3F	; 63
    233a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    233e:	88 23       	and	r24, r24
    2340:	2c f4       	brge	.+10     	; 0x234c <LCD_displayCharacter+0x96a>
		__ticks = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9c 8b       	std	Y+20, r25	; 0x14
    2348:	8b 8b       	std	Y+19, r24	; 0x13
    234a:	3f c0       	rjmp	.+126    	; 0x23ca <LCD_displayCharacter+0x9e8>
	else if (__tmp > 65535)
    234c:	6d 89       	ldd	r22, Y+21	; 0x15
    234e:	7e 89       	ldd	r23, Y+22	; 0x16
    2350:	8f 89       	ldd	r24, Y+23	; 0x17
    2352:	98 8d       	ldd	r25, Y+24	; 0x18
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	3f ef       	ldi	r19, 0xFF	; 255
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	57 e4       	ldi	r21, 0x47	; 71
    235c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2360:	18 16       	cp	r1, r24
    2362:	4c f5       	brge	.+82     	; 0x23b6 <LCD_displayCharacter+0x9d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2364:	69 8d       	ldd	r22, Y+25	; 0x19
    2366:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2368:	8b 8d       	ldd	r24, Y+27	; 0x1b
    236a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e2       	ldi	r20, 0x20	; 32
    2372:	51 e4       	ldi	r21, 0x41	; 65
    2374:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	bc 01       	movw	r22, r24
    237e:	cd 01       	movw	r24, r26
    2380:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	9c 8b       	std	Y+20, r25	; 0x14
    238a:	8b 8b       	std	Y+19, r24	; 0x13
    238c:	0f c0       	rjmp	.+30     	; 0x23ac <LCD_displayCharacter+0x9ca>
    238e:	89 e1       	ldi	r24, 0x19	; 25
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	9a 8b       	std	Y+18, r25	; 0x12
    2394:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2396:	89 89       	ldd	r24, Y+17	; 0x11
    2398:	9a 89       	ldd	r25, Y+18	; 0x12
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	f1 f7       	brne	.-4      	; 0x239a <LCD_displayCharacter+0x9b8>
    239e:	9a 8b       	std	Y+18, r25	; 0x12
    23a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a2:	8b 89       	ldd	r24, Y+19	; 0x13
    23a4:	9c 89       	ldd	r25, Y+20	; 0x14
    23a6:	01 97       	sbiw	r24, 0x01	; 1
    23a8:	9c 8b       	std	Y+20, r25	; 0x14
    23aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ac:	8b 89       	ldd	r24, Y+19	; 0x13
    23ae:	9c 89       	ldd	r25, Y+20	; 0x14
    23b0:	00 97       	sbiw	r24, 0x00	; 0
    23b2:	69 f7       	brne	.-38     	; 0x238e <LCD_displayCharacter+0x9ac>
    23b4:	14 c0       	rjmp	.+40     	; 0x23de <LCD_displayCharacter+0x9fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b6:	6d 89       	ldd	r22, Y+21	; 0x15
    23b8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ba:	8f 89       	ldd	r24, Y+23	; 0x17
    23bc:	98 8d       	ldd	r25, Y+24	; 0x18
    23be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c2:	dc 01       	movw	r26, r24
    23c4:	cb 01       	movw	r24, r22
    23c6:	9c 8b       	std	Y+20, r25	; 0x14
    23c8:	8b 8b       	std	Y+19, r24	; 0x13
    23ca:	8b 89       	ldd	r24, Y+19	; 0x13
    23cc:	9c 89       	ldd	r25, Y+20	; 0x14
    23ce:	98 8b       	std	Y+16, r25	; 0x10
    23d0:	8f 87       	std	Y+15, r24	; 0x0f
    23d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d4:	98 89       	ldd	r25, Y+16	; 0x10
    23d6:	01 97       	sbiw	r24, 0x01	; 1
    23d8:	f1 f7       	brne	.-4      	; 0x23d6 <LCD_displayCharacter+0x9f4>
    23da:	98 8b       	std	Y+16, r25	; 0x10
    23dc:	8f 87       	std	Y+15, r24	; 0x0f
		#endif
		_delay_ms(1);
		CLEAR_BIT(LCD_CTRL_PORT,E);
    23de:	a8 e3       	ldi	r26, 0x38	; 56
    23e0:	b0 e0       	ldi	r27, 0x00	; 0
    23e2:	e8 e3       	ldi	r30, 0x38	; 56
    23e4:	f0 e0       	ldi	r31, 0x00	; 0
    23e6:	80 81       	ld	r24, Z
    23e8:	87 7f       	andi	r24, 0xF7	; 247
    23ea:	8c 93       	st	X, r24
    23ec:	80 e0       	ldi	r24, 0x00	; 0
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	a0 e8       	ldi	r26, 0x80	; 128
    23f2:	bf e3       	ldi	r27, 0x3F	; 63
    23f4:	8b 87       	std	Y+11, r24	; 0x0b
    23f6:	9c 87       	std	Y+12, r25	; 0x0c
    23f8:	ad 87       	std	Y+13, r26	; 0x0d
    23fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2400:	8d 85       	ldd	r24, Y+13	; 0x0d
    2402:	9e 85       	ldd	r25, Y+14	; 0x0e
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	4a e7       	ldi	r20, 0x7A	; 122
    240a:	53 e4       	ldi	r21, 0x43	; 67
    240c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	8f 83       	std	Y+7, r24	; 0x07
    2416:	98 87       	std	Y+8, r25	; 0x08
    2418:	a9 87       	std	Y+9, r26	; 0x09
    241a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    241c:	6f 81       	ldd	r22, Y+7	; 0x07
    241e:	78 85       	ldd	r23, Y+8	; 0x08
    2420:	89 85       	ldd	r24, Y+9	; 0x09
    2422:	9a 85       	ldd	r25, Y+10	; 0x0a
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	30 e0       	ldi	r19, 0x00	; 0
    2428:	40 e8       	ldi	r20, 0x80	; 128
    242a:	5f e3       	ldi	r21, 0x3F	; 63
    242c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2430:	88 23       	and	r24, r24
    2432:	2c f4       	brge	.+10     	; 0x243e <LCD_displayCharacter+0xa5c>
		__ticks = 1;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	9e 83       	std	Y+6, r25	; 0x06
    243a:	8d 83       	std	Y+5, r24	; 0x05
    243c:	3f c0       	rjmp	.+126    	; 0x24bc <LCD_displayCharacter+0xada>
	else if (__tmp > 65535)
    243e:	6f 81       	ldd	r22, Y+7	; 0x07
    2440:	78 85       	ldd	r23, Y+8	; 0x08
    2442:	89 85       	ldd	r24, Y+9	; 0x09
    2444:	9a 85       	ldd	r25, Y+10	; 0x0a
    2446:	20 e0       	ldi	r18, 0x00	; 0
    2448:	3f ef       	ldi	r19, 0xFF	; 255
    244a:	4f e7       	ldi	r20, 0x7F	; 127
    244c:	57 e4       	ldi	r21, 0x47	; 71
    244e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2452:	18 16       	cp	r1, r24
    2454:	4c f5       	brge	.+82     	; 0x24a8 <LCD_displayCharacter+0xac6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2456:	6b 85       	ldd	r22, Y+11	; 0x0b
    2458:	7c 85       	ldd	r23, Y+12	; 0x0c
    245a:	8d 85       	ldd	r24, Y+13	; 0x0d
    245c:	9e 85       	ldd	r25, Y+14	; 0x0e
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	40 e2       	ldi	r20, 0x20	; 32
    2464:	51 e4       	ldi	r21, 0x41	; 65
    2466:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	bc 01       	movw	r22, r24
    2470:	cd 01       	movw	r24, r26
    2472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	9e 83       	std	Y+6, r25	; 0x06
    247c:	8d 83       	std	Y+5, r24	; 0x05
    247e:	0f c0       	rjmp	.+30     	; 0x249e <LCD_displayCharacter+0xabc>
    2480:	89 e1       	ldi	r24, 0x19	; 25
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9c 83       	std	Y+4, r25	; 0x04
    2486:	8b 83       	std	Y+3, r24	; 0x03
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	9c 81       	ldd	r25, Y+4	; 0x04
    248c:	01 97       	sbiw	r24, 0x01	; 1
    248e:	f1 f7       	brne	.-4      	; 0x248c <LCD_displayCharacter+0xaaa>
    2490:	9c 83       	std	Y+4, r25	; 0x04
    2492:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2494:	8d 81       	ldd	r24, Y+5	; 0x05
    2496:	9e 81       	ldd	r25, Y+6	; 0x06
    2498:	01 97       	sbiw	r24, 0x01	; 1
    249a:	9e 83       	std	Y+6, r25	; 0x06
    249c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    249e:	8d 81       	ldd	r24, Y+5	; 0x05
    24a0:	9e 81       	ldd	r25, Y+6	; 0x06
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	69 f7       	brne	.-38     	; 0x2480 <LCD_displayCharacter+0xa9e>
    24a6:	14 c0       	rjmp	.+40     	; 0x24d0 <LCD_displayCharacter+0xaee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a8:	6f 81       	ldd	r22, Y+7	; 0x07
    24aa:	78 85       	ldd	r23, Y+8	; 0x08
    24ac:	89 85       	ldd	r24, Y+9	; 0x09
    24ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b4:	dc 01       	movw	r26, r24
    24b6:	cb 01       	movw	r24, r22
    24b8:	9e 83       	std	Y+6, r25	; 0x06
    24ba:	8d 83       	std	Y+5, r24	; 0x05
    24bc:	8d 81       	ldd	r24, Y+5	; 0x05
    24be:	9e 81       	ldd	r25, Y+6	; 0x06
    24c0:	9a 83       	std	Y+2, r25	; 0x02
    24c2:	89 83       	std	Y+1, r24	; 0x01
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	9a 81       	ldd	r25, Y+2	; 0x02
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	f1 f7       	brne	.-4      	; 0x24c8 <LCD_displayCharacter+0xae6>
    24cc:	9a 83       	std	Y+2, r25	; 0x02
    24ce:	89 83       	std	Y+1, r24	; 0x01
		LCD_DATA_PORT = a_character;
		_delay_us(1);
		CLEAR_BIT(LCD_CTRL_PORT,E);
		_delay_ms(1);
	#endif
}
    24d0:	cf 57       	subi	r28, 0x7F	; 127
    24d2:	df 4f       	sbci	r29, 0xFF	; 255
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	de bf       	out	0x3e, r29	; 62
    24da:	0f be       	out	0x3f, r0	; 63
    24dc:	cd bf       	out	0x3d, r28	; 61
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	1f 91       	pop	r17
    24e4:	0f 91       	pop	r16
    24e6:	08 95       	ret

000024e8 <LCD_displayString>:

void LCD_displayString(uint8 * a_str)
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	00 d0       	rcall	.+0      	; 0x24ee <LCD_displayString+0x6>
    24ee:	cd b7       	in	r28, 0x3d	; 61
    24f0:	de b7       	in	r29, 0x3e	; 62
    24f2:	9a 83       	std	Y+2, r25	; 0x02
    24f4:	89 83       	std	Y+1, r24	; 0x01
    24f6:	0a c0       	rjmp	.+20     	; 0x250c <LCD_displayString+0x24>
	while((*a_str) != '\0')
	{
		LCD_displayCharacter(*a_str);
    24f8:	e9 81       	ldd	r30, Y+1	; 0x01
    24fa:	fa 81       	ldd	r31, Y+2	; 0x02
    24fc:	80 81       	ld	r24, Z
    24fe:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_displayCharacter>
		a_str++;
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	9a 81       	ldd	r25, Y+2	; 0x02
    2506:	01 96       	adiw	r24, 0x01	; 1
    2508:	9a 83       	std	Y+2, r25	; 0x02
    250a:	89 83       	std	Y+1, r24	; 0x01
	#endif
}

void LCD_displayString(uint8 * a_str)
{
	while((*a_str) != '\0')
    250c:	e9 81       	ldd	r30, Y+1	; 0x01
    250e:	fa 81       	ldd	r31, Y+2	; 0x02
    2510:	80 81       	ld	r24, Z
    2512:	88 23       	and	r24, r24
    2514:	89 f7       	brne	.-30     	; 0x24f8 <LCD_displayString+0x10>
	{
		LCD_displayCharacter(*a_str);
		a_str++;
	}
}
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	cf 91       	pop	r28
    251c:	df 91       	pop	r29
    251e:	08 95       	ret

00002520 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	00 d0       	rcall	.+0      	; 0x2526 <LCD_goToRowColumn+0x6>
    2526:	00 d0       	rcall	.+0      	; 0x2528 <LCD_goToRowColumn+0x8>
    2528:	0f 92       	push	r0
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	8a 83       	std	Y+2, r24	; 0x02
    2530:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	switch(row)
    2532:	8a 81       	ldd	r24, Y+2	; 0x02
    2534:	28 2f       	mov	r18, r24
    2536:	30 e0       	ldi	r19, 0x00	; 0
    2538:	3d 83       	std	Y+5, r19	; 0x05
    253a:	2c 83       	std	Y+4, r18	; 0x04
    253c:	8c 81       	ldd	r24, Y+4	; 0x04
    253e:	9d 81       	ldd	r25, Y+5	; 0x05
    2540:	81 30       	cpi	r24, 0x01	; 1
    2542:	91 05       	cpc	r25, r1
    2544:	c1 f0       	breq	.+48     	; 0x2576 <LCD_goToRowColumn+0x56>
    2546:	2c 81       	ldd	r18, Y+4	; 0x04
    2548:	3d 81       	ldd	r19, Y+5	; 0x05
    254a:	22 30       	cpi	r18, 0x02	; 2
    254c:	31 05       	cpc	r19, r1
    254e:	2c f4       	brge	.+10     	; 0x255a <LCD_goToRowColumn+0x3a>
    2550:	8c 81       	ldd	r24, Y+4	; 0x04
    2552:	9d 81       	ldd	r25, Y+5	; 0x05
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	61 f0       	breq	.+24     	; 0x2570 <LCD_goToRowColumn+0x50>
    2558:	19 c0       	rjmp	.+50     	; 0x258c <LCD_goToRowColumn+0x6c>
    255a:	2c 81       	ldd	r18, Y+4	; 0x04
    255c:	3d 81       	ldd	r19, Y+5	; 0x05
    255e:	22 30       	cpi	r18, 0x02	; 2
    2560:	31 05       	cpc	r19, r1
    2562:	69 f0       	breq	.+26     	; 0x257e <LCD_goToRowColumn+0x5e>
    2564:	8c 81       	ldd	r24, Y+4	; 0x04
    2566:	9d 81       	ldd	r25, Y+5	; 0x05
    2568:	83 30       	cpi	r24, 0x03	; 3
    256a:	91 05       	cpc	r25, r1
    256c:	61 f0       	breq	.+24     	; 0x2586 <LCD_goToRowColumn+0x66>
    256e:	0e c0       	rjmp	.+28     	; 0x258c <LCD_goToRowColumn+0x6c>
	{
	case 0:
		Address = col;
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	89 83       	std	Y+1, r24	; 0x01
    2574:	0b c0       	rjmp	.+22     	; 0x258c <LCD_goToRowColumn+0x6c>
		break;
	case 1:
		Address = col+0x40;
    2576:	8b 81       	ldd	r24, Y+3	; 0x03
    2578:	80 5c       	subi	r24, 0xC0	; 192
    257a:	89 83       	std	Y+1, r24	; 0x01
    257c:	07 c0       	rjmp	.+14     	; 0x258c <LCD_goToRowColumn+0x6c>
		break;
	case 2:
		Address = col+0x10;
    257e:	8b 81       	ldd	r24, Y+3	; 0x03
    2580:	80 5f       	subi	r24, 0xF0	; 240
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	03 c0       	rjmp	.+6      	; 0x258c <LCD_goToRowColumn+0x6c>
		break;
	case 3:
		Address = col+0x50;
    2586:	8b 81       	ldd	r24, Y+3	; 0x03
    2588:	80 5b       	subi	r24, 0xB0	; 176
    258a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    258c:	89 81       	ldd	r24, Y+1	; 0x01
    258e:	80 68       	ori	r24, 0x80	; 128
    2590:	0e 94 6e 07 	call	0xedc	; 0xedc <LCD_sendCommand>
}
    2594:	0f 90       	pop	r0
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	cf 91       	pop	r28
    25a0:	df 91       	pop	r29
    25a2:	08 95       	ret

000025a4 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const uint8 * a_str)
{
    25a4:	df 93       	push	r29
    25a6:	cf 93       	push	r28
    25a8:	00 d0       	rcall	.+0      	; 0x25aa <LCD_displayStringRowColumn+0x6>
    25aa:	00 d0       	rcall	.+0      	; 0x25ac <LCD_displayStringRowColumn+0x8>
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	6a 83       	std	Y+2, r22	; 0x02
    25b4:	5c 83       	std	Y+4, r21	; 0x04
    25b6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col);
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	6a 81       	ldd	r22, Y+2	; 0x02
    25bc:	0e 94 90 12 	call	0x2520	; 0x2520 <LCD_goToRowColumn>
	LCD_displayString(a_str);
    25c0:	8b 81       	ldd	r24, Y+3	; 0x03
    25c2:	9c 81       	ldd	r25, Y+4	; 0x04
    25c4:	0e 94 74 12 	call	0x24e8	; 0x24e8 <LCD_displayString>
}
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	cd b7       	in	r28, 0x3d	; 61
    25dc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND);
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	0e 94 6e 07 	call	0xedc	; 0xedc <LCD_sendCommand>
}
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <LCD_intgerToString>:

void LCD_intgerToString(uint16 data)
{
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	62 97       	sbiw	r28, 0x12	; 18
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	9a 8b       	std	Y+18, r25	; 0x12
    2600:	89 8b       	std	Y+17, r24	; 0x11
	char str[16];
	itoa(data,str,10);
    2602:	89 89       	ldd	r24, Y+17	; 0x11
    2604:	9a 89       	ldd	r25, Y+18	; 0x12
    2606:	9e 01       	movw	r18, r28
    2608:	2f 5f       	subi	r18, 0xFF	; 255
    260a:	3f 4f       	sbci	r19, 0xFF	; 255
    260c:	b9 01       	movw	r22, r18
    260e:	4a e0       	ldi	r20, 0x0A	; 10
    2610:	50 e0       	ldi	r21, 0x00	; 0
    2612:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <itoa>
	LCD_displayString(str);
    2616:	ce 01       	movw	r24, r28
    2618:	01 96       	adiw	r24, 0x01	; 1
    261a:	0e 94 74 12 	call	0x24e8	; 0x24e8 <LCD_displayString>
}
    261e:	62 96       	adiw	r28, 0x12	; 18
    2620:	0f b6       	in	r0, 0x3f	; 63
    2622:	f8 94       	cli
    2624:	de bf       	out	0x3e, r29	; 62
    2626:	0f be       	out	0x3f, r0	; 63
    2628:	cd bf       	out	0x3d, r28	; 61
    262a:	cf 91       	pop	r28
    262c:	df 91       	pop	r29
    262e:	08 95       	ret

00002630 <LCD_intgerToStringRowCol>:


void LCD_intgerToStringRowCol(uint8 row,uint8 col,uint8 data)
{
    2630:	df 93       	push	r29
    2632:	cf 93       	push	r28
    2634:	cd b7       	in	r28, 0x3d	; 61
    2636:	de b7       	in	r29, 0x3e	; 62
    2638:	63 97       	sbiw	r28, 0x13	; 19
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61
    2644:	89 8b       	std	Y+17, r24	; 0x11
    2646:	6a 8b       	std	Y+18, r22	; 0x12
    2648:	4b 8b       	std	Y+19, r20	; 0x13
	uint8 buff[16];
	itoa(data,buff,10);
    264a:	8b 89       	ldd	r24, Y+19	; 0x13
    264c:	88 2f       	mov	r24, r24
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9e 01       	movw	r18, r28
    2652:	2f 5f       	subi	r18, 0xFF	; 255
    2654:	3f 4f       	sbci	r19, 0xFF	; 255
    2656:	b9 01       	movw	r22, r18
    2658:	4a e0       	ldi	r20, 0x0A	; 10
    265a:	50 e0       	ldi	r21, 0x00	; 0
    265c:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <itoa>
	LCD_displayStringRowColumn(row,col,buff);
    2660:	89 89       	ldd	r24, Y+17	; 0x11
    2662:	6a 89       	ldd	r22, Y+18	; 0x12
    2664:	9e 01       	movw	r18, r28
    2666:	2f 5f       	subi	r18, 0xFF	; 255
    2668:	3f 4f       	sbci	r19, 0xFF	; 255
    266a:	a9 01       	movw	r20, r18
    266c:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <LCD_displayStringRowColumn>
}
    2670:	63 96       	adiw	r28, 0x13	; 19
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <main>:
uint8 op;
uint8 key;
uint16 result = 0;

int main(void)
{
    2682:	0f 93       	push	r16
    2684:	1f 93       	push	r17
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	c8 54       	subi	r28, 0x48	; 72
    2690:	d0 40       	sbci	r29, 0x00	; 0
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
    269c:	0e 94 4d 07 	call	0xe9a	; 0xe9a <LCD_init>

	while(1)
	{
		key = KEYPAD_getPressedKey();
    26a0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <KEYPAD_getPressedKey>
    26a4:	80 93 6f 00 	sts	0x006F, r24
    26a8:	a7 c0       	rjmp	.+334    	; 0x27f8 <main+0x176>
		while((key >= 0) && (key <= 9))
		{
			LCD_intgerToString(key);
    26aa:	80 91 6f 00 	lds	r24, 0x006F
    26ae:	88 2f       	mov	r24, r24
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	0e 94 f5 12 	call	0x25ea	; 0x25ea <LCD_intgerToString>
			firstNum = key + firstNum * 10;
    26b6:	80 91 6f 00 	lds	r24, 0x006F
    26ba:	48 2f       	mov	r20, r24
    26bc:	50 e0       	ldi	r21, 0x00	; 0
    26be:	80 91 68 00 	lds	r24, 0x0068
    26c2:	90 91 69 00 	lds	r25, 0x0069
    26c6:	9c 01       	movw	r18, r24
    26c8:	22 0f       	add	r18, r18
    26ca:	33 1f       	adc	r19, r19
    26cc:	c9 01       	movw	r24, r18
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	88 0f       	add	r24, r24
    26d4:	99 1f       	adc	r25, r25
    26d6:	82 0f       	add	r24, r18
    26d8:	93 1f       	adc	r25, r19
    26da:	84 0f       	add	r24, r20
    26dc:	95 1f       	adc	r25, r21
    26de:	90 93 69 00 	sts	0x0069, r25
    26e2:	80 93 68 00 	sts	0x0068, r24
    26e6:	fe 01       	movw	r30, r28
    26e8:	ed 5b       	subi	r30, 0xBD	; 189
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	a6 e9       	ldi	r26, 0x96	; 150
    26f2:	b3 e4       	ldi	r27, 0x43	; 67
    26f4:	80 83       	st	Z, r24
    26f6:	91 83       	std	Z+1, r25	; 0x01
    26f8:	a2 83       	std	Z+2, r26	; 0x02
    26fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fc:	8e 01       	movw	r16, r28
    26fe:	01 5c       	subi	r16, 0xC1	; 193
    2700:	1f 4f       	sbci	r17, 0xFF	; 255
    2702:	fe 01       	movw	r30, r28
    2704:	ed 5b       	subi	r30, 0xBD	; 189
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	60 81       	ld	r22, Z
    270a:	71 81       	ldd	r23, Z+1	; 0x01
    270c:	82 81       	ldd	r24, Z+2	; 0x02
    270e:	93 81       	ldd	r25, Z+3	; 0x03
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	4a e7       	ldi	r20, 0x7A	; 122
    2716:	53 e4       	ldi	r21, 0x43	; 67
    2718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	f8 01       	movw	r30, r16
    2722:	80 83       	st	Z, r24
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	a2 83       	std	Z+2, r26	; 0x02
    2728:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    272a:	fe 01       	movw	r30, r28
    272c:	ff 96       	adiw	r30, 0x3f	; 63
    272e:	60 81       	ld	r22, Z
    2730:	71 81       	ldd	r23, Z+1	; 0x01
    2732:	82 81       	ldd	r24, Z+2	; 0x02
    2734:	93 81       	ldd	r25, Z+3	; 0x03
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e8       	ldi	r20, 0x80	; 128
    273c:	5f e3       	ldi	r21, 0x3F	; 63
    273e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2742:	88 23       	and	r24, r24
    2744:	2c f4       	brge	.+10     	; 0x2750 <main+0xce>
		__ticks = 1;
    2746:	81 e0       	ldi	r24, 0x01	; 1
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	9e af       	std	Y+62, r25	; 0x3e
    274c:	8d af       	std	Y+61, r24	; 0x3d
    274e:	46 c0       	rjmp	.+140    	; 0x27dc <main+0x15a>
	else if (__tmp > 65535)
    2750:	fe 01       	movw	r30, r28
    2752:	ff 96       	adiw	r30, 0x3f	; 63
    2754:	60 81       	ld	r22, Z
    2756:	71 81       	ldd	r23, Z+1	; 0x01
    2758:	82 81       	ldd	r24, Z+2	; 0x02
    275a:	93 81       	ldd	r25, Z+3	; 0x03
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	3f ef       	ldi	r19, 0xFF	; 255
    2760:	4f e7       	ldi	r20, 0x7F	; 127
    2762:	57 e4       	ldi	r21, 0x47	; 71
    2764:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2768:	18 16       	cp	r1, r24
    276a:	64 f5       	brge	.+88     	; 0x27c4 <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276c:	fe 01       	movw	r30, r28
    276e:	ed 5b       	subi	r30, 0xBD	; 189
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	60 81       	ld	r22, Z
    2774:	71 81       	ldd	r23, Z+1	; 0x01
    2776:	82 81       	ldd	r24, Z+2	; 0x02
    2778:	93 81       	ldd	r25, Z+3	; 0x03
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e2       	ldi	r20, 0x20	; 32
    2780:	51 e4       	ldi	r21, 0x41	; 65
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	bc 01       	movw	r22, r24
    278c:	cd 01       	movw	r24, r26
    278e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	9e af       	std	Y+62, r25	; 0x3e
    2798:	8d af       	std	Y+61, r24	; 0x3d
    279a:	0f c0       	rjmp	.+30     	; 0x27ba <main+0x138>
    279c:	89 e1       	ldi	r24, 0x19	; 25
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	9c af       	std	Y+60, r25	; 0x3c
    27a2:	8b af       	std	Y+59, r24	; 0x3b
    27a4:	8b ad       	ldd	r24, Y+59	; 0x3b
    27a6:	9c ad       	ldd	r25, Y+60	; 0x3c
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <main+0x126>
    27ac:	9c af       	std	Y+60, r25	; 0x3c
    27ae:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    27b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    27b4:	01 97       	sbiw	r24, 0x01	; 1
    27b6:	9e af       	std	Y+62, r25	; 0x3e
    27b8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    27bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	69 f7       	brne	.-38     	; 0x279c <main+0x11a>
    27c2:	16 c0       	rjmp	.+44     	; 0x27f0 <main+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c4:	fe 01       	movw	r30, r28
    27c6:	ff 96       	adiw	r30, 0x3f	; 63
    27c8:	60 81       	ld	r22, Z
    27ca:	71 81       	ldd	r23, Z+1	; 0x01
    27cc:	82 81       	ldd	r24, Z+2	; 0x02
    27ce:	93 81       	ldd	r25, Z+3	; 0x03
    27d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	9e af       	std	Y+62, r25	; 0x3e
    27da:	8d af       	std	Y+61, r24	; 0x3d
    27dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    27de:	9e ad       	ldd	r25, Y+62	; 0x3e
    27e0:	9a af       	std	Y+58, r25	; 0x3a
    27e2:	89 af       	std	Y+57, r24	; 0x39
    27e4:	89 ad       	ldd	r24, Y+57	; 0x39
    27e6:	9a ad       	ldd	r25, Y+58	; 0x3a
    27e8:	01 97       	sbiw	r24, 0x01	; 1
    27ea:	f1 f7       	brne	.-4      	; 0x27e8 <main+0x166>
    27ec:	9a af       	std	Y+58, r25	; 0x3a
    27ee:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(300);
			key = KEYPAD_getPressedKey();
    27f0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <KEYPAD_getPressedKey>
    27f4:	80 93 6f 00 	sts	0x006F, r24
	LCD_init();

	while(1)
	{
		key = KEYPAD_getPressedKey();
		while((key >= 0) && (key <= 9))
    27f8:	80 91 6f 00 	lds	r24, 0x006F
    27fc:	8a 30       	cpi	r24, 0x0A	; 10
    27fe:	08 f4       	brcc	.+2      	; 0x2802 <main+0x180>
    2800:	54 cf       	rjmp	.-344    	; 0x26aa <main+0x28>
			LCD_intgerToString(key);
			firstNum = key + firstNum * 10;
			_delay_ms(300);
			key = KEYPAD_getPressedKey();
		}
		LCD_displayCharacter(key);
    2802:	80 91 6f 00 	lds	r24, 0x006F
    2806:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_displayCharacter>
		op = key;
    280a:	80 91 6f 00 	lds	r24, 0x006F
    280e:	80 93 6e 00 	sts	0x006E, r24
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	a6 e9       	ldi	r26, 0x96	; 150
    2818:	b3 e4       	ldi	r27, 0x43	; 67
    281a:	8d ab       	std	Y+53, r24	; 0x35
    281c:	9e ab       	std	Y+54, r25	; 0x36
    281e:	af ab       	std	Y+55, r26	; 0x37
    2820:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2822:	6d a9       	ldd	r22, Y+53	; 0x35
    2824:	7e a9       	ldd	r23, Y+54	; 0x36
    2826:	8f a9       	ldd	r24, Y+55	; 0x37
    2828:	98 ad       	ldd	r25, Y+56	; 0x38
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	4a e7       	ldi	r20, 0x7A	; 122
    2830:	53 e4       	ldi	r21, 0x43	; 67
    2832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	89 ab       	std	Y+49, r24	; 0x31
    283c:	9a ab       	std	Y+50, r25	; 0x32
    283e:	ab ab       	std	Y+51, r26	; 0x33
    2840:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2842:	69 a9       	ldd	r22, Y+49	; 0x31
    2844:	7a a9       	ldd	r23, Y+50	; 0x32
    2846:	8b a9       	ldd	r24, Y+51	; 0x33
    2848:	9c a9       	ldd	r25, Y+52	; 0x34
    284a:	20 e0       	ldi	r18, 0x00	; 0
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	40 e8       	ldi	r20, 0x80	; 128
    2850:	5f e3       	ldi	r21, 0x3F	; 63
    2852:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2856:	88 23       	and	r24, r24
    2858:	2c f4       	brge	.+10     	; 0x2864 <main+0x1e2>
		__ticks = 1;
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	98 ab       	std	Y+48, r25	; 0x30
    2860:	8f a7       	std	Y+47, r24	; 0x2f
    2862:	3f c0       	rjmp	.+126    	; 0x28e2 <main+0x260>
	else if (__tmp > 65535)
    2864:	69 a9       	ldd	r22, Y+49	; 0x31
    2866:	7a a9       	ldd	r23, Y+50	; 0x32
    2868:	8b a9       	ldd	r24, Y+51	; 0x33
    286a:	9c a9       	ldd	r25, Y+52	; 0x34
    286c:	20 e0       	ldi	r18, 0x00	; 0
    286e:	3f ef       	ldi	r19, 0xFF	; 255
    2870:	4f e7       	ldi	r20, 0x7F	; 127
    2872:	57 e4       	ldi	r21, 0x47	; 71
    2874:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2878:	18 16       	cp	r1, r24
    287a:	4c f5       	brge	.+82     	; 0x28ce <main+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287c:	6d a9       	ldd	r22, Y+53	; 0x35
    287e:	7e a9       	ldd	r23, Y+54	; 0x36
    2880:	8f a9       	ldd	r24, Y+55	; 0x37
    2882:	98 ad       	ldd	r25, Y+56	; 0x38
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e2       	ldi	r20, 0x20	; 32
    288a:	51 e4       	ldi	r21, 0x41	; 65
    288c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	bc 01       	movw	r22, r24
    2896:	cd 01       	movw	r24, r26
    2898:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	98 ab       	std	Y+48, r25	; 0x30
    28a2:	8f a7       	std	Y+47, r24	; 0x2f
    28a4:	0f c0       	rjmp	.+30     	; 0x28c4 <main+0x242>
    28a6:	89 e1       	ldi	r24, 0x19	; 25
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	9e a7       	std	Y+46, r25	; 0x2e
    28ac:	8d a7       	std	Y+45, r24	; 0x2d
    28ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    28b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	f1 f7       	brne	.-4      	; 0x28b2 <main+0x230>
    28b6:	9e a7       	std	Y+46, r25	; 0x2e
    28b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    28bc:	98 a9       	ldd	r25, Y+48	; 0x30
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	98 ab       	std	Y+48, r25	; 0x30
    28c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    28c6:	98 a9       	ldd	r25, Y+48	; 0x30
    28c8:	00 97       	sbiw	r24, 0x00	; 0
    28ca:	69 f7       	brne	.-38     	; 0x28a6 <main+0x224>
    28cc:	14 c0       	rjmp	.+40     	; 0x28f6 <main+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ce:	69 a9       	ldd	r22, Y+49	; 0x31
    28d0:	7a a9       	ldd	r23, Y+50	; 0x32
    28d2:	8b a9       	ldd	r24, Y+51	; 0x33
    28d4:	9c a9       	ldd	r25, Y+52	; 0x34
    28d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28da:	dc 01       	movw	r26, r24
    28dc:	cb 01       	movw	r24, r22
    28de:	98 ab       	std	Y+48, r25	; 0x30
    28e0:	8f a7       	std	Y+47, r24	; 0x2f
    28e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28e4:	98 a9       	ldd	r25, Y+48	; 0x30
    28e6:	9c a7       	std	Y+44, r25	; 0x2c
    28e8:	8b a7       	std	Y+43, r24	; 0x2b
    28ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    28ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    28ee:	01 97       	sbiw	r24, 0x01	; 1
    28f0:	f1 f7       	brne	.-4      	; 0x28ee <main+0x26c>
    28f2:	9c a7       	std	Y+44, r25	; 0x2c
    28f4:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(300);
		key = KEYPAD_getPressedKey();
    28f6:	0e 94 4f 06 	call	0xc9e	; 0xc9e <KEYPAD_getPressedKey>
    28fa:	80 93 6f 00 	sts	0x006F, r24
    28fe:	94 c0       	rjmp	.+296    	; 0x2a28 <main+0x3a6>
		while((key >= 0) && (key <= 9))
		{
			LCD_intgerToString(key);
    2900:	80 91 6f 00 	lds	r24, 0x006F
    2904:	88 2f       	mov	r24, r24
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	0e 94 f5 12 	call	0x25ea	; 0x25ea <LCD_intgerToString>
			secondNum = key + secondNum * 10;
    290c:	80 91 6f 00 	lds	r24, 0x006F
    2910:	48 2f       	mov	r20, r24
    2912:	50 e0       	ldi	r21, 0x00	; 0
    2914:	80 91 6a 00 	lds	r24, 0x006A
    2918:	90 91 6b 00 	lds	r25, 0x006B
    291c:	9c 01       	movw	r18, r24
    291e:	22 0f       	add	r18, r18
    2920:	33 1f       	adc	r19, r19
    2922:	c9 01       	movw	r24, r18
    2924:	88 0f       	add	r24, r24
    2926:	99 1f       	adc	r25, r25
    2928:	88 0f       	add	r24, r24
    292a:	99 1f       	adc	r25, r25
    292c:	82 0f       	add	r24, r18
    292e:	93 1f       	adc	r25, r19
    2930:	84 0f       	add	r24, r20
    2932:	95 1f       	adc	r25, r21
    2934:	90 93 6b 00 	sts	0x006B, r25
    2938:	80 93 6a 00 	sts	0x006A, r24
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	a6 e9       	ldi	r26, 0x96	; 150
    2942:	b3 e4       	ldi	r27, 0x43	; 67
    2944:	8f a3       	std	Y+39, r24	; 0x27
    2946:	98 a7       	std	Y+40, r25	; 0x28
    2948:	a9 a7       	std	Y+41, r26	; 0x29
    294a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294c:	6f a1       	ldd	r22, Y+39	; 0x27
    294e:	78 a5       	ldd	r23, Y+40	; 0x28
    2950:	89 a5       	ldd	r24, Y+41	; 0x29
    2952:	9a a5       	ldd	r25, Y+42	; 0x2a
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	4a e7       	ldi	r20, 0x7A	; 122
    295a:	53 e4       	ldi	r21, 0x43	; 67
    295c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	8b a3       	std	Y+35, r24	; 0x23
    2966:	9c a3       	std	Y+36, r25	; 0x24
    2968:	ad a3       	std	Y+37, r26	; 0x25
    296a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    296c:	6b a1       	ldd	r22, Y+35	; 0x23
    296e:	7c a1       	ldd	r23, Y+36	; 0x24
    2970:	8d a1       	ldd	r24, Y+37	; 0x25
    2972:	9e a1       	ldd	r25, Y+38	; 0x26
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e8       	ldi	r20, 0x80	; 128
    297a:	5f e3       	ldi	r21, 0x3F	; 63
    297c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2980:	88 23       	and	r24, r24
    2982:	2c f4       	brge	.+10     	; 0x298e <main+0x30c>
		__ticks = 1;
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	9a a3       	std	Y+34, r25	; 0x22
    298a:	89 a3       	std	Y+33, r24	; 0x21
    298c:	3f c0       	rjmp	.+126    	; 0x2a0c <main+0x38a>
	else if (__tmp > 65535)
    298e:	6b a1       	ldd	r22, Y+35	; 0x23
    2990:	7c a1       	ldd	r23, Y+36	; 0x24
    2992:	8d a1       	ldd	r24, Y+37	; 0x25
    2994:	9e a1       	ldd	r25, Y+38	; 0x26
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	3f ef       	ldi	r19, 0xFF	; 255
    299a:	4f e7       	ldi	r20, 0x7F	; 127
    299c:	57 e4       	ldi	r21, 0x47	; 71
    299e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29a2:	18 16       	cp	r1, r24
    29a4:	4c f5       	brge	.+82     	; 0x29f8 <main+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a6:	6f a1       	ldd	r22, Y+39	; 0x27
    29a8:	78 a5       	ldd	r23, Y+40	; 0x28
    29aa:	89 a5       	ldd	r24, Y+41	; 0x29
    29ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e2       	ldi	r20, 0x20	; 32
    29b4:	51 e4       	ldi	r21, 0x41	; 65
    29b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	bc 01       	movw	r22, r24
    29c0:	cd 01       	movw	r24, r26
    29c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	9a a3       	std	Y+34, r25	; 0x22
    29cc:	89 a3       	std	Y+33, r24	; 0x21
    29ce:	0f c0       	rjmp	.+30     	; 0x29ee <main+0x36c>
    29d0:	89 e1       	ldi	r24, 0x19	; 25
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	98 a3       	std	Y+32, r25	; 0x20
    29d6:	8f 8f       	std	Y+31, r24	; 0x1f
    29d8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29da:	98 a1       	ldd	r25, Y+32	; 0x20
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <main+0x35a>
    29e0:	98 a3       	std	Y+32, r25	; 0x20
    29e2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e4:	89 a1       	ldd	r24, Y+33	; 0x21
    29e6:	9a a1       	ldd	r25, Y+34	; 0x22
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	9a a3       	std	Y+34, r25	; 0x22
    29ec:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ee:	89 a1       	ldd	r24, Y+33	; 0x21
    29f0:	9a a1       	ldd	r25, Y+34	; 0x22
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	69 f7       	brne	.-38     	; 0x29d0 <main+0x34e>
    29f6:	14 c0       	rjmp	.+40     	; 0x2a20 <main+0x39e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f8:	6b a1       	ldd	r22, Y+35	; 0x23
    29fa:	7c a1       	ldd	r23, Y+36	; 0x24
    29fc:	8d a1       	ldd	r24, Y+37	; 0x25
    29fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	9a a3       	std	Y+34, r25	; 0x22
    2a0a:	89 a3       	std	Y+33, r24	; 0x21
    2a0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2a0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2a10:	9e 8f       	std	Y+30, r25	; 0x1e
    2a12:	8d 8f       	std	Y+29, r24	; 0x1d
    2a14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2a16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <main+0x396>
    2a1c:	9e 8f       	std	Y+30, r25	; 0x1e
    2a1e:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(300);
			key = KEYPAD_getPressedKey();
    2a20:	0e 94 4f 06 	call	0xc9e	; 0xc9e <KEYPAD_getPressedKey>
    2a24:	80 93 6f 00 	sts	0x006F, r24
		}
		LCD_displayCharacter(key);
		op = key;
		_delay_ms(300);
		key = KEYPAD_getPressedKey();
		while((key >= 0) && (key <= 9))
    2a28:	80 91 6f 00 	lds	r24, 0x006F
    2a2c:	8a 30       	cpi	r24, 0x0A	; 10
    2a2e:	08 f4       	brcc	.+2      	; 0x2a32 <main+0x3b0>
    2a30:	67 cf       	rjmp	.-306    	; 0x2900 <main+0x27e>
			LCD_intgerToString(key);
			secondNum = key + secondNum * 10;
			_delay_ms(300);
			key = KEYPAD_getPressedKey();
		}
		LCD_displayCharacter(key);
    2a32:	80 91 6f 00 	lds	r24, 0x006F
    2a36:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <LCD_displayCharacter>
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	a6 e9       	ldi	r26, 0x96	; 150
    2a40:	b3 e4       	ldi	r27, 0x43	; 67
    2a42:	89 8f       	std	Y+25, r24	; 0x19
    2a44:	9a 8f       	std	Y+26, r25	; 0x1a
    2a46:	ab 8f       	std	Y+27, r26	; 0x1b
    2a48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a4a:	69 8d       	ldd	r22, Y+25	; 0x19
    2a4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	4a e7       	ldi	r20, 0x7A	; 122
    2a58:	53 e4       	ldi	r21, 0x43	; 67
    2a5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a5e:	dc 01       	movw	r26, r24
    2a60:	cb 01       	movw	r24, r22
    2a62:	8d 8b       	std	Y+21, r24	; 0x15
    2a64:	9e 8b       	std	Y+22, r25	; 0x16
    2a66:	af 8b       	std	Y+23, r26	; 0x17
    2a68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a6a:	6d 89       	ldd	r22, Y+21	; 0x15
    2a6c:	7e 89       	ldd	r23, Y+22	; 0x16
    2a6e:	8f 89       	ldd	r24, Y+23	; 0x17
    2a70:	98 8d       	ldd	r25, Y+24	; 0x18
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e8       	ldi	r20, 0x80	; 128
    2a78:	5f e3       	ldi	r21, 0x3F	; 63
    2a7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a7e:	88 23       	and	r24, r24
    2a80:	2c f4       	brge	.+10     	; 0x2a8c <main+0x40a>
		__ticks = 1;
    2a82:	81 e0       	ldi	r24, 0x01	; 1
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	9c 8b       	std	Y+20, r25	; 0x14
    2a88:	8b 8b       	std	Y+19, r24	; 0x13
    2a8a:	3f c0       	rjmp	.+126    	; 0x2b0a <main+0x488>
	else if (__tmp > 65535)
    2a8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a90:	8f 89       	ldd	r24, Y+23	; 0x17
    2a92:	98 8d       	ldd	r25, Y+24	; 0x18
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	3f ef       	ldi	r19, 0xFF	; 255
    2a98:	4f e7       	ldi	r20, 0x7F	; 127
    2a9a:	57 e4       	ldi	r21, 0x47	; 71
    2a9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2aa0:	18 16       	cp	r1, r24
    2aa2:	4c f5       	brge	.+82     	; 0x2af6 <main+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aa4:	69 8d       	ldd	r22, Y+25	; 0x19
    2aa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aaa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aac:	20 e0       	ldi	r18, 0x00	; 0
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	40 e2       	ldi	r20, 0x20	; 32
    2ab2:	51 e4       	ldi	r21, 0x41	; 65
    2ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	bc 01       	movw	r22, r24
    2abe:	cd 01       	movw	r24, r26
    2ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac4:	dc 01       	movw	r26, r24
    2ac6:	cb 01       	movw	r24, r22
    2ac8:	9c 8b       	std	Y+20, r25	; 0x14
    2aca:	8b 8b       	std	Y+19, r24	; 0x13
    2acc:	0f c0       	rjmp	.+30     	; 0x2aec <main+0x46a>
    2ace:	89 e1       	ldi	r24, 0x19	; 25
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	9a 8b       	std	Y+18, r25	; 0x12
    2ad4:	89 8b       	std	Y+17, r24	; 0x11
    2ad6:	89 89       	ldd	r24, Y+17	; 0x11
    2ad8:	9a 89       	ldd	r25, Y+18	; 0x12
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <main+0x458>
    2ade:	9a 8b       	std	Y+18, r25	; 0x12
    2ae0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ae2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	9c 8b       	std	Y+20, r25	; 0x14
    2aea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aec:	8b 89       	ldd	r24, Y+19	; 0x13
    2aee:	9c 89       	ldd	r25, Y+20	; 0x14
    2af0:	00 97       	sbiw	r24, 0x00	; 0
    2af2:	69 f7       	brne	.-38     	; 0x2ace <main+0x44c>
    2af4:	14 c0       	rjmp	.+40     	; 0x2b1e <main+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2af6:	6d 89       	ldd	r22, Y+21	; 0x15
    2af8:	7e 89       	ldd	r23, Y+22	; 0x16
    2afa:	8f 89       	ldd	r24, Y+23	; 0x17
    2afc:	98 8d       	ldd	r25, Y+24	; 0x18
    2afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	9c 8b       	std	Y+20, r25	; 0x14
    2b08:	8b 8b       	std	Y+19, r24	; 0x13
    2b0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b0e:	98 8b       	std	Y+16, r25	; 0x10
    2b10:	8f 87       	std	Y+15, r24	; 0x0f
    2b12:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b14:	98 89       	ldd	r25, Y+16	; 0x10
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	f1 f7       	brne	.-4      	; 0x2b16 <main+0x494>
    2b1a:	98 8b       	std	Y+16, r25	; 0x10
    2b1c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(300);
		switch(op)
    2b1e:	80 91 6e 00 	lds	r24, 0x006E
    2b22:	28 2f       	mov	r18, r24
    2b24:	30 e0       	ldi	r19, 0x00	; 0
    2b26:	29 96       	adiw	r28, 0x09	; 9
    2b28:	3f af       	std	Y+63, r19	; 0x3f
    2b2a:	2e af       	std	Y+62, r18	; 0x3e
    2b2c:	29 97       	sbiw	r28, 0x09	; 9
    2b2e:	29 96       	adiw	r28, 0x09	; 9
    2b30:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b32:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b34:	29 97       	sbiw	r28, 0x09	; 9
    2b36:	4b 32       	cpi	r20, 0x2B	; 43
    2b38:	51 05       	cpc	r21, r1
    2b3a:	f9 f0       	breq	.+62     	; 0x2b7a <main+0x4f8>
    2b3c:	29 96       	adiw	r28, 0x09	; 9
    2b3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2b40:	9f ad       	ldd	r25, Y+63	; 0x3f
    2b42:	29 97       	sbiw	r28, 0x09	; 9
    2b44:	8c 32       	cpi	r24, 0x2C	; 44
    2b46:	91 05       	cpc	r25, r1
    2b48:	4c f4       	brge	.+18     	; 0x2b5c <main+0x4da>
    2b4a:	29 96       	adiw	r28, 0x09	; 9
    2b4c:	ee ad       	ldd	r30, Y+62	; 0x3e
    2b4e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2b50:	29 97       	sbiw	r28, 0x09	; 9
    2b52:	ea 32       	cpi	r30, 0x2A	; 42
    2b54:	f1 05       	cpc	r31, r1
    2b56:	09 f4       	brne	.+2      	; 0x2b5a <main+0x4d8>
    2b58:	3f c0       	rjmp	.+126    	; 0x2bd8 <main+0x556>
    2b5a:	52 c0       	rjmp	.+164    	; 0x2c00 <main+0x57e>
    2b5c:	29 96       	adiw	r28, 0x09	; 9
    2b5e:	2e ad       	ldd	r18, Y+62	; 0x3e
    2b60:	3f ad       	ldd	r19, Y+63	; 0x3f
    2b62:	29 97       	sbiw	r28, 0x09	; 9
    2b64:	2d 32       	cpi	r18, 0x2D	; 45
    2b66:	31 05       	cpc	r19, r1
    2b68:	b9 f0       	breq	.+46     	; 0x2b98 <main+0x516>
    2b6a:	29 96       	adiw	r28, 0x09	; 9
    2b6c:	4e ad       	ldd	r20, Y+62	; 0x3e
    2b6e:	5f ad       	ldd	r21, Y+63	; 0x3f
    2b70:	29 97       	sbiw	r28, 0x09	; 9
    2b72:	4f 32       	cpi	r20, 0x2F	; 47
    2b74:	51 05       	cpc	r21, r1
    2b76:	f9 f0       	breq	.+62     	; 0x2bb6 <main+0x534>
    2b78:	43 c0       	rjmp	.+134    	; 0x2c00 <main+0x57e>
		{
		case '+' : result = firstNum + secondNum;
    2b7a:	80 91 68 00 	lds	r24, 0x0068
    2b7e:	90 91 69 00 	lds	r25, 0x0069
    2b82:	20 91 6a 00 	lds	r18, 0x006A
    2b86:	30 91 6b 00 	lds	r19, 0x006B
    2b8a:	82 0f       	add	r24, r18
    2b8c:	93 1f       	adc	r25, r19
    2b8e:	90 93 6d 00 	sts	0x006D, r25
    2b92:	80 93 6c 00 	sts	0x006C, r24
    2b96:	34 c0       	rjmp	.+104    	; 0x2c00 <main+0x57e>
		break;
		case '-' : result = firstNum - secondNum;
    2b98:	80 91 68 00 	lds	r24, 0x0068
    2b9c:	90 91 69 00 	lds	r25, 0x0069
    2ba0:	20 91 6a 00 	lds	r18, 0x006A
    2ba4:	30 91 6b 00 	lds	r19, 0x006B
    2ba8:	82 1b       	sub	r24, r18
    2baa:	93 0b       	sbc	r25, r19
    2bac:	90 93 6d 00 	sts	0x006D, r25
    2bb0:	80 93 6c 00 	sts	0x006C, r24
    2bb4:	25 c0       	rjmp	.+74     	; 0x2c00 <main+0x57e>
		break;
		case '/' : result = firstNum / secondNum;
    2bb6:	80 91 68 00 	lds	r24, 0x0068
    2bba:	90 91 69 00 	lds	r25, 0x0069
    2bbe:	20 91 6a 00 	lds	r18, 0x006A
    2bc2:	30 91 6b 00 	lds	r19, 0x006B
    2bc6:	b9 01       	movw	r22, r18
    2bc8:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <__udivmodhi4>
    2bcc:	cb 01       	movw	r24, r22
    2bce:	90 93 6d 00 	sts	0x006D, r25
    2bd2:	80 93 6c 00 	sts	0x006C, r24
    2bd6:	14 c0       	rjmp	.+40     	; 0x2c00 <main+0x57e>
		break;
		case '*' : result = firstNum * secondNum;
    2bd8:	80 91 68 00 	lds	r24, 0x0068
    2bdc:	90 91 69 00 	lds	r25, 0x0069
    2be0:	20 91 6a 00 	lds	r18, 0x006A
    2be4:	30 91 6b 00 	lds	r19, 0x006B
    2be8:	fc 01       	movw	r30, r24
    2bea:	e2 9f       	mul	r30, r18
    2bec:	c0 01       	movw	r24, r0
    2bee:	e3 9f       	mul	r30, r19
    2bf0:	90 0d       	add	r25, r0
    2bf2:	f2 9f       	mul	r31, r18
    2bf4:	90 0d       	add	r25, r0
    2bf6:	11 24       	eor	r1, r1
    2bf8:	90 93 6d 00 	sts	0x006D, r25
    2bfc:	80 93 6c 00 	sts	0x006C, r24
		break;
		}
		LCD_intgerToString(result);
    2c00:	80 91 6c 00 	lds	r24, 0x006C
    2c04:	90 91 6d 00 	lds	r25, 0x006D
    2c08:	0e 94 f5 12 	call	0x25ea	; 0x25ea <LCD_intgerToString>
		firstNum = 0;
    2c0c:	10 92 69 00 	sts	0x0069, r1
    2c10:	10 92 68 00 	sts	0x0068, r1
		secondNum = 0;
    2c14:	10 92 6b 00 	sts	0x006B, r1
    2c18:	10 92 6a 00 	sts	0x006A, r1
		key = 0;
    2c1c:	10 92 6f 00 	sts	0x006F, r1
		result = 0;
    2c20:	10 92 6d 00 	sts	0x006D, r1
    2c24:	10 92 6c 00 	sts	0x006C, r1
		if((KEYPAD_getPressedKey()) == 13)
    2c28:	0e 94 4f 06 	call	0xc9e	; 0xc9e <KEYPAD_getPressedKey>
    2c2c:	8d 30       	cpi	r24, 0x0D	; 13
    2c2e:	11 f4       	brne	.+4      	; 0x2c34 <main+0x5b2>
		{
			LCD_clearScreen();
    2c30:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <LCD_clearScreen>
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	a6 e9       	ldi	r26, 0x96	; 150
    2c3a:	b3 e4       	ldi	r27, 0x43	; 67
    2c3c:	8b 87       	std	Y+11, r24	; 0x0b
    2c3e:	9c 87       	std	Y+12, r25	; 0x0c
    2c40:	ad 87       	std	Y+13, r26	; 0x0d
    2c42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4c:	20 e0       	ldi	r18, 0x00	; 0
    2c4e:	30 e0       	ldi	r19, 0x00	; 0
    2c50:	4a e7       	ldi	r20, 0x7A	; 122
    2c52:	53 e4       	ldi	r21, 0x43	; 67
    2c54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	8f 83       	std	Y+7, r24	; 0x07
    2c5e:	98 87       	std	Y+8, r25	; 0x08
    2c60:	a9 87       	std	Y+9, r26	; 0x09
    2c62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c64:	6f 81       	ldd	r22, Y+7	; 0x07
    2c66:	78 85       	ldd	r23, Y+8	; 0x08
    2c68:	89 85       	ldd	r24, Y+9	; 0x09
    2c6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	40 e8       	ldi	r20, 0x80	; 128
    2c72:	5f e3       	ldi	r21, 0x3F	; 63
    2c74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c78:	88 23       	and	r24, r24
    2c7a:	2c f4       	brge	.+10     	; 0x2c86 <main+0x604>
		__ticks = 1;
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	9e 83       	std	Y+6, r25	; 0x06
    2c82:	8d 83       	std	Y+5, r24	; 0x05
    2c84:	3f c0       	rjmp	.+126    	; 0x2d04 <main+0x682>
	else if (__tmp > 65535)
    2c86:	6f 81       	ldd	r22, Y+7	; 0x07
    2c88:	78 85       	ldd	r23, Y+8	; 0x08
    2c8a:	89 85       	ldd	r24, Y+9	; 0x09
    2c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8e:	20 e0       	ldi	r18, 0x00	; 0
    2c90:	3f ef       	ldi	r19, 0xFF	; 255
    2c92:	4f e7       	ldi	r20, 0x7F	; 127
    2c94:	57 e4       	ldi	r21, 0x47	; 71
    2c96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c9a:	18 16       	cp	r1, r24
    2c9c:	4c f5       	brge	.+82     	; 0x2cf0 <main+0x66e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	40 e2       	ldi	r20, 0x20	; 32
    2cac:	51 e4       	ldi	r21, 0x41	; 65
    2cae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	bc 01       	movw	r22, r24
    2cb8:	cd 01       	movw	r24, r26
    2cba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	9e 83       	std	Y+6, r25	; 0x06
    2cc4:	8d 83       	std	Y+5, r24	; 0x05
    2cc6:	0f c0       	rjmp	.+30     	; 0x2ce6 <main+0x664>
    2cc8:	89 e1       	ldi	r24, 0x19	; 25
    2cca:	90 e0       	ldi	r25, 0x00	; 0
    2ccc:	9c 83       	std	Y+4, r25	; 0x04
    2cce:	8b 83       	std	Y+3, r24	; 0x03
    2cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd4:	01 97       	sbiw	r24, 0x01	; 1
    2cd6:	f1 f7       	brne	.-4      	; 0x2cd4 <main+0x652>
    2cd8:	9c 83       	std	Y+4, r25	; 0x04
    2cda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cde:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	9e 83       	std	Y+6, r25	; 0x06
    2ce4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    2cea:	00 97       	sbiw	r24, 0x00	; 0
    2cec:	69 f7       	brne	.-38     	; 0x2cc8 <main+0x646>
    2cee:	d8 cc       	rjmp	.-1616   	; 0x26a0 <main+0x1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf0:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf2:	78 85       	ldd	r23, Y+8	; 0x08
    2cf4:	89 85       	ldd	r24, Y+9	; 0x09
    2cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfc:	dc 01       	movw	r26, r24
    2cfe:	cb 01       	movw	r24, r22
    2d00:	9e 83       	std	Y+6, r25	; 0x06
    2d02:	8d 83       	std	Y+5, r24	; 0x05
    2d04:	8d 81       	ldd	r24, Y+5	; 0x05
    2d06:	9e 81       	ldd	r25, Y+6	; 0x06
    2d08:	9a 83       	std	Y+2, r25	; 0x02
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	f1 f7       	brne	.-4      	; 0x2d10 <main+0x68e>
    2d14:	9a 83       	std	Y+2, r25	; 0x02
    2d16:	89 83       	std	Y+1, r24	; 0x01
    2d18:	c3 cc       	rjmp	.-1658   	; 0x26a0 <main+0x1e>

00002d1a <__udivmodhi4>:
    2d1a:	aa 1b       	sub	r26, r26
    2d1c:	bb 1b       	sub	r27, r27
    2d1e:	51 e1       	ldi	r21, 0x11	; 17
    2d20:	07 c0       	rjmp	.+14     	; 0x2d30 <__udivmodhi4_ep>

00002d22 <__udivmodhi4_loop>:
    2d22:	aa 1f       	adc	r26, r26
    2d24:	bb 1f       	adc	r27, r27
    2d26:	a6 17       	cp	r26, r22
    2d28:	b7 07       	cpc	r27, r23
    2d2a:	10 f0       	brcs	.+4      	; 0x2d30 <__udivmodhi4_ep>
    2d2c:	a6 1b       	sub	r26, r22
    2d2e:	b7 0b       	sbc	r27, r23

00002d30 <__udivmodhi4_ep>:
    2d30:	88 1f       	adc	r24, r24
    2d32:	99 1f       	adc	r25, r25
    2d34:	5a 95       	dec	r21
    2d36:	a9 f7       	brne	.-22     	; 0x2d22 <__udivmodhi4_loop>
    2d38:	80 95       	com	r24
    2d3a:	90 95       	com	r25
    2d3c:	bc 01       	movw	r22, r24
    2d3e:	cd 01       	movw	r24, r26
    2d40:	08 95       	ret

00002d42 <__prologue_saves__>:
    2d42:	2f 92       	push	r2
    2d44:	3f 92       	push	r3
    2d46:	4f 92       	push	r4
    2d48:	5f 92       	push	r5
    2d4a:	6f 92       	push	r6
    2d4c:	7f 92       	push	r7
    2d4e:	8f 92       	push	r8
    2d50:	9f 92       	push	r9
    2d52:	af 92       	push	r10
    2d54:	bf 92       	push	r11
    2d56:	cf 92       	push	r12
    2d58:	df 92       	push	r13
    2d5a:	ef 92       	push	r14
    2d5c:	ff 92       	push	r15
    2d5e:	0f 93       	push	r16
    2d60:	1f 93       	push	r17
    2d62:	cf 93       	push	r28
    2d64:	df 93       	push	r29
    2d66:	cd b7       	in	r28, 0x3d	; 61
    2d68:	de b7       	in	r29, 0x3e	; 62
    2d6a:	ca 1b       	sub	r28, r26
    2d6c:	db 0b       	sbc	r29, r27
    2d6e:	0f b6       	in	r0, 0x3f	; 63
    2d70:	f8 94       	cli
    2d72:	de bf       	out	0x3e, r29	; 62
    2d74:	0f be       	out	0x3f, r0	; 63
    2d76:	cd bf       	out	0x3d, r28	; 61
    2d78:	09 94       	ijmp

00002d7a <__epilogue_restores__>:
    2d7a:	2a 88       	ldd	r2, Y+18	; 0x12
    2d7c:	39 88       	ldd	r3, Y+17	; 0x11
    2d7e:	48 88       	ldd	r4, Y+16	; 0x10
    2d80:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d82:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d84:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d86:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d88:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d8a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d8c:	b9 84       	ldd	r11, Y+9	; 0x09
    2d8e:	c8 84       	ldd	r12, Y+8	; 0x08
    2d90:	df 80       	ldd	r13, Y+7	; 0x07
    2d92:	ee 80       	ldd	r14, Y+6	; 0x06
    2d94:	fd 80       	ldd	r15, Y+5	; 0x05
    2d96:	0c 81       	ldd	r16, Y+4	; 0x04
    2d98:	1b 81       	ldd	r17, Y+3	; 0x03
    2d9a:	aa 81       	ldd	r26, Y+2	; 0x02
    2d9c:	b9 81       	ldd	r27, Y+1	; 0x01
    2d9e:	ce 0f       	add	r28, r30
    2da0:	d1 1d       	adc	r29, r1
    2da2:	0f b6       	in	r0, 0x3f	; 63
    2da4:	f8 94       	cli
    2da6:	de bf       	out	0x3e, r29	; 62
    2da8:	0f be       	out	0x3f, r0	; 63
    2daa:	cd bf       	out	0x3d, r28	; 61
    2dac:	ed 01       	movw	r28, r26
    2dae:	08 95       	ret

00002db0 <itoa>:
    2db0:	fb 01       	movw	r30, r22
    2db2:	9f 01       	movw	r18, r30
    2db4:	e8 94       	clt
    2db6:	42 30       	cpi	r20, 0x02	; 2
    2db8:	c4 f0       	brlt	.+48     	; 0x2dea <itoa+0x3a>
    2dba:	45 32       	cpi	r20, 0x25	; 37
    2dbc:	b4 f4       	brge	.+44     	; 0x2dea <itoa+0x3a>
    2dbe:	4a 30       	cpi	r20, 0x0A	; 10
    2dc0:	29 f4       	brne	.+10     	; 0x2dcc <itoa+0x1c>
    2dc2:	97 fb       	bst	r25, 7
    2dc4:	1e f4       	brtc	.+6      	; 0x2dcc <itoa+0x1c>
    2dc6:	90 95       	com	r25
    2dc8:	81 95       	neg	r24
    2dca:	9f 4f       	sbci	r25, 0xFF	; 255
    2dcc:	64 2f       	mov	r22, r20
    2dce:	77 27       	eor	r23, r23
    2dd0:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <__udivmodhi4>
    2dd4:	80 5d       	subi	r24, 0xD0	; 208
    2dd6:	8a 33       	cpi	r24, 0x3A	; 58
    2dd8:	0c f0       	brlt	.+2      	; 0x2ddc <itoa+0x2c>
    2dda:	89 5d       	subi	r24, 0xD9	; 217
    2ddc:	81 93       	st	Z+, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	00 97       	sbiw	r24, 0x00	; 0
    2de2:	a1 f7       	brne	.-24     	; 0x2dcc <itoa+0x1c>
    2de4:	16 f4       	brtc	.+4      	; 0x2dea <itoa+0x3a>
    2de6:	5d e2       	ldi	r21, 0x2D	; 45
    2de8:	51 93       	st	Z+, r21
    2dea:	10 82       	st	Z, r1
    2dec:	c9 01       	movw	r24, r18
    2dee:	0c 94 f9 16 	jmp	0x2df2	; 0x2df2 <strrev>

00002df2 <strrev>:
    2df2:	dc 01       	movw	r26, r24
    2df4:	fc 01       	movw	r30, r24
    2df6:	67 2f       	mov	r22, r23
    2df8:	71 91       	ld	r23, Z+
    2dfa:	77 23       	and	r23, r23
    2dfc:	e1 f7       	brne	.-8      	; 0x2df6 <strrev+0x4>
    2dfe:	32 97       	sbiw	r30, 0x02	; 2
    2e00:	04 c0       	rjmp	.+8      	; 0x2e0a <strrev+0x18>
    2e02:	7c 91       	ld	r23, X
    2e04:	6d 93       	st	X+, r22
    2e06:	70 83       	st	Z, r23
    2e08:	62 91       	ld	r22, -Z
    2e0a:	ae 17       	cp	r26, r30
    2e0c:	bf 07       	cpc	r27, r31
    2e0e:	c8 f3       	brcs	.-14     	; 0x2e02 <strrev+0x10>
    2e10:	08 95       	ret

00002e12 <_exit>:
    2e12:	f8 94       	cli

00002e14 <__stop_program>:
    2e14:	ff cf       	rjmp	.-2      	; 0x2e14 <__stop_program>
